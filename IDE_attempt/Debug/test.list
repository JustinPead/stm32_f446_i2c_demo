
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d0  080039d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039d8  080039d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080039ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080039ec  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1b9  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdf  00000000  00000000  0002c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002e210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082f  00000000  00000000  0002ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010d47  00000000  00000000  0002f4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb75  00000000  00000000  0004020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00063e24  00000000  00000000  0004fd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024ac  00000000  00000000  000b3ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000b6054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800394c 	.word	0x0800394c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800394c 	.word	0x0800394c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f003 fa1c 	bl	80038f4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004bc:	4b30      	ldr	r3, [pc, #192]	; (8000580 <MX_ADC_Init+0xd8>)
 80004be:	4a31      	ldr	r2, [pc, #196]	; (8000584 <MX_ADC_Init+0xdc>)
 80004c0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <MX_ADC_Init+0xd8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004c8:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <MX_ADC_Init+0xd8>)
 80004ca:	22c0      	movs	r2, #192	; 0xc0
 80004cc:	0612      	lsls	r2, r2, #24
 80004ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004d0:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <MX_ADC_Init+0xd8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004d6:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <MX_ADC_Init+0xd8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004dc:	4b28      	ldr	r3, [pc, #160]	; (8000580 <MX_ADC_Init+0xd8>)
 80004de:	2201      	movs	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <MX_ADC_Init+0xd8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004e8:	4b25      	ldr	r3, [pc, #148]	; (8000580 <MX_ADC_Init+0xd8>)
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <MX_ADC_Init+0xd8>)
 80004f2:	2221      	movs	r2, #33	; 0x21
 80004f4:	2100      	movs	r1, #0
 80004f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_ADC_Init+0xd8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_ADC_Init+0xd8>)
 8000500:	22c2      	movs	r2, #194	; 0xc2
 8000502:	32ff      	adds	r2, #255	; 0xff
 8000504:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_ADC_Init+0xd8>)
 8000508:	222c      	movs	r2, #44	; 0x2c
 800050a:	2100      	movs	r1, #0
 800050c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <MX_ADC_Init+0xd8>)
 8000510:	2204      	movs	r2, #4
 8000512:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_ADC_Init+0xd8>)
 8000516:	2200      	movs	r2, #0
 8000518:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <MX_ADC_Init+0xd8>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_ADC_Init+0xd8>)
 8000522:	2201      	movs	r2, #1
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_ADC_Init+0xd8>)
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_ADC_Init+0xd8>)
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fc04 	bl	8000d3c <HAL_ADC_Init>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000538:	f000 fa80 	bl	8000a3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800053c:	003b      	movs	r3, r7
 800053e:	2201      	movs	r2, #1
 8000540:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000542:	003b      	movs	r3, r7
 8000544:	2280      	movs	r2, #128	; 0x80
 8000546:	0152      	lsls	r2, r2, #5
 8000548:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800054a:	003a      	movs	r2, r7
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <MX_ADC_Init+0xd8>)
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fd67 	bl	8001024 <HAL_ADC_ConfigChannel>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800055a:	f000 fa6f 	bl	8000a3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800055e:	003b      	movs	r3, r7
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <MX_ADC_Init+0xe0>)
 8000562:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000564:	003a      	movs	r2, r7
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_ADC_Init+0xd8>)
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fd5a 	bl	8001024 <HAL_ADC_ConfigChannel>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000574:	f000 fa62 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000028 	.word	0x20000028
 8000584:	40012400 	.word	0x40012400
 8000588:	0c000008 	.word	0x0c000008

0800058c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b089      	sub	sp, #36	; 0x24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	240c      	movs	r4, #12
 8000596:	193b      	adds	r3, r7, r4
 8000598:	0018      	movs	r0, r3
 800059a:	2314      	movs	r3, #20
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f003 f9a8 	bl	80038f4 <memset>
  if(adcHandle->Instance==ADC1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_ADC_MspInit+0x70>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d122      	bne.n	80005f4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HAL_ADC_MspInit+0x74>)
 80005b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_ADC_MspInit+0x74>)
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	0089      	lsls	r1, r1, #2
 80005b8:	430a      	orrs	r2, r1
 80005ba:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_ADC_MspInit+0x74>)
 80005be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_ADC_MspInit+0x74>)
 80005c2:	2101      	movs	r1, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <HAL_ADC_MspInit+0x74>)
 80005ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005cc:	2201      	movs	r2, #1
 80005ce:	4013      	ands	r3, r2
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = SENSE_LIGHT_Pin|SENSE_PWR_Pin;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2209      	movs	r2, #9
 80005d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2203      	movs	r2, #3
 80005de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	23a0      	movs	r3, #160	; 0xa0
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fe34 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b009      	add	sp, #36	; 0x24
 80005fa:	bd90      	pop	{r4, r7, pc}
 80005fc:	40012400 	.word	0x40012400
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b089      	sub	sp, #36	; 0x24
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	240c      	movs	r4, #12
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2314      	movs	r3, #20
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f003 f96d 	bl	80038f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b4e      	ldr	r3, [pc, #312]	; (8000754 <MX_GPIO_Init+0x150>)
 800061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061e:	4b4d      	ldr	r3, [pc, #308]	; (8000754 <MX_GPIO_Init+0x150>)
 8000620:	2104      	movs	r1, #4
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
 8000626:	4b4b      	ldr	r3, [pc, #300]	; (8000754 <MX_GPIO_Init+0x150>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	2204      	movs	r2, #4
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b48      	ldr	r3, [pc, #288]	; (8000754 <MX_GPIO_Init+0x150>)
 8000634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000636:	4b47      	ldr	r3, [pc, #284]	; (8000754 <MX_GPIO_Init+0x150>)
 8000638:	2101      	movs	r1, #1
 800063a:	430a      	orrs	r2, r1
 800063c:	62da      	str	r2, [r3, #44]	; 0x2c
 800063e:	4b45      	ldr	r3, [pc, #276]	; (8000754 <MX_GPIO_Init+0x150>)
 8000640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000642:	2201      	movs	r2, #1
 8000644:	4013      	ands	r3, r2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b42      	ldr	r3, [pc, #264]	; (8000754 <MX_GPIO_Init+0x150>)
 800064c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800064e:	4b41      	ldr	r3, [pc, #260]	; (8000754 <MX_GPIO_Init+0x150>)
 8000650:	2102      	movs	r1, #2
 8000652:	430a      	orrs	r2, r1
 8000654:	62da      	str	r2, [r3, #44]	; 0x2c
 8000656:	4b3f      	ldr	r3, [pc, #252]	; (8000754 <MX_GPIO_Init+0x150>)
 8000658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065a:	2202      	movs	r2, #2
 800065c:	4013      	ands	r3, r2
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CTRL_PWR_LIGHT_Pin|CTRL_PWR_TEMP_Pin, GPIO_PIN_RESET);
 8000662:	23c0      	movs	r3, #192	; 0xc0
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	483c      	ldr	r0, [pc, #240]	; (8000758 <MX_GPIO_Init+0x154>)
 8000668:	2200      	movs	r2, #0
 800066a:	0019      	movs	r1, r3
 800066c:	f000 ff79 	bl	8001562 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTRL_PWR_RADIO_Pin|E_DRV_Pin|D_DRV_Pin|DP_DRV_Pin
 8000670:	493a      	ldr	r1, [pc, #232]	; (800075c <MX_GPIO_Init+0x158>)
 8000672:	23a0      	movs	r3, #160	; 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2200      	movs	r2, #0
 8000678:	0018      	movs	r0, r3
 800067a:	f000 ff72 	bl	8001562 <HAL_GPIO_WritePin>
                          |GRID1_DRV_Pin|GRID2_DRV_Pin|GRID3_DRV_Pin|B_DRV_Pin
                          |C_DRV_Pin|G_DRV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_DRV_Pin|F_DRV_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 800067e:	4b38      	ldr	r3, [pc, #224]	; (8000760 <MX_GPIO_Init+0x15c>)
 8000680:	2200      	movs	r2, #0
 8000682:	2133      	movs	r1, #51	; 0x33
 8000684:	0018      	movs	r0, r3
 8000686:	f000 ff6c 	bl	8001562 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTRL_LEDS_GPIO_Port, CTRL_LEDS_Pin, GPIO_PIN_SET);
 800068a:	4b35      	ldr	r3, [pc, #212]	; (8000760 <MX_GPIO_Init+0x15c>)
 800068c:	2201      	movs	r2, #1
 800068e:	2108      	movs	r1, #8
 8000690:	0018      	movs	r0, r3
 8000692:	f000 ff66 	bl	8001562 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CTRL_PWR_LIGHT_Pin|CTRL_PWR_TEMP_Pin;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	22c0      	movs	r2, #192	; 0xc0
 800069a:	0212      	lsls	r2, r2, #8
 800069c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2201      	movs	r2, #1
 80006a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	4a29      	ldr	r2, [pc, #164]	; (8000758 <MX_GPIO_Init+0x154>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f000 fdd0 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CTRL_PWR_RADIO_Pin|E_DRV_Pin|D_DRV_Pin|DP_DRV_Pin
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	4a27      	ldr	r2, [pc, #156]	; (800075c <MX_GPIO_Init+0x158>)
 80006c0:	601a      	str	r2, [r3, #0]
                          |GRID1_DRV_Pin|GRID2_DRV_Pin|GRID3_DRV_Pin|B_DRV_Pin
                          |C_DRV_Pin|G_DRV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	193a      	adds	r2, r7, r4
 80006d6:	23a0      	movs	r3, #160	; 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fdbd 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = A_DRV_Pin|F_DRV_Pin|CTRL_LEDS_Pin|LED1_Pin
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	223b      	movs	r2, #59	; 0x3b
 80006e6:	601a      	str	r2, [r3, #0]
                          |LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2201      	movs	r2, #1
 80006ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	4a18      	ldr	r2, [pc, #96]	; (8000760 <MX_GPIO_Init+0x15c>)
 80006fe:	0019      	movs	r1, r3
 8000700:	0010      	movs	r0, r2
 8000702:	f000 fdab 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PB0_Pin;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	0212      	lsls	r2, r2, #8
 800070c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2201      	movs	r2, #1
 8000718:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PB0_GPIO_Port, &GPIO_InitStruct);
 800071a:	193a      	adds	r2, r7, r4
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fd9a 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PB1_Pin;
 8000728:	0021      	movs	r1, r4
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2201      	movs	r2, #1
 800073c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PB1_GPIO_Port, &GPIO_InitStruct);
 800073e:	187b      	adds	r3, r7, r1
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <MX_GPIO_Init+0x15c>)
 8000742:	0019      	movs	r1, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f000 fd89 	bl	800125c <HAL_GPIO_Init>

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b009      	add	sp, #36	; 0x24
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40021000 	.word	0x40021000
 8000758:	50000800 	.word	0x50000800
 800075c:	00001ff2 	.word	0x00001ff2
 8000760:	50000400 	.word	0x50000400

08000764 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_I2C1_Init+0x78>)
 800076a:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <MX_I2C1_Init+0x7c>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_I2C1_Init+0x78>)
 8000770:	22e1      	movs	r2, #225	; 0xe1
 8000772:	00d2      	lsls	r2, r2, #3
 8000774:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_I2C1_Init+0x78>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_I2C1_Init+0x78>)
 800077e:	2201      	movs	r2, #1
 8000780:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_I2C1_Init+0x78>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_I2C1_Init+0x78>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_I2C1_Init+0x78>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x78>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_I2C1_Init+0x78>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x78>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 ff16 	bl	80015d4 <HAL_I2C_Init>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ac:	f000 f946 	bl	8000a3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x78>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 fc69 	bl	800208c <HAL_I2CEx_ConfigAnalogFilter>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007be:	f000 f93d 	bl	8000a3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x78>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fcac 	bl	8002124 <HAL_I2CEx_ConfigDigitalFilter>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 f934 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	20000084 	.word	0x20000084
 80007e0:	40005400 	.word	0x40005400

080007e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b089      	sub	sp, #36	; 0x24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	240c      	movs	r4, #12
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f003 f87c 	bl	80038f4 <memset>
  if(i2cHandle->Instance==I2C1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_I2C_MspInit+0x7c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d128      	bne.n	8000858 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_I2C_MspInit+0x80>)
 800080c:	2102      	movs	r1, #2
 800080e:	430a      	orrs	r2, r1
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	2202      	movs	r2, #2
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800081e:	0021      	movs	r1, r4
 8000820:	187b      	adds	r3, r7, r1
 8000822:	22c0      	movs	r2, #192	; 0xc0
 8000824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2212      	movs	r2, #18
 800082a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2203      	movs	r2, #3
 8000836:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2201      	movs	r2, #1
 800083c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	187b      	adds	r3, r7, r1
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <HAL_I2C_MspInit+0x84>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f000 fd09 	bl	800125c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x80>)
 800084c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_I2C_MspInit+0x80>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	0389      	lsls	r1, r1, #14
 8000854:	430a      	orrs	r2, r1
 8000856:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b009      	add	sp, #36	; 0x24
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	40005400 	.word	0x40005400
 8000864:	40021000 	.word	0x40021000
 8000868:	50000400 	.word	0x50000400

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 f9d0 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f830 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f7ff fec4 	bl	8000604 <MX_GPIO_Init>
  MX_ADC_Init();
 800087c:	f7ff fe14 	bl	80004a8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000880:	f7ff ff70 	bl	8000764 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000884:	f000 f910 	bl	8000aa8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GPIO_ReadPin(PB0_GPIO_Port,PB0_Pin)==0) {
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	021a      	lsls	r2, r3, #8
 800088c:	23a0      	movs	r3, #160	; 0xa0
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fe48 	bl	8001528 <HAL_GPIO_ReadPin>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d104      	bne.n	80008a6 <main+0x3a>
		HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <main+0x68>)
 800089e:	2120      	movs	r1, #32
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fe7b 	bl	800159c <HAL_GPIO_TogglePin>
	}
	if(HAL_GPIO_ReadPin(PB1_GPIO_Port,PB1_Pin)==0) {
 80008a6:	2380      	movs	r3, #128	; 0x80
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <main+0x68>)
 80008ac:	0019      	movs	r1, r3
 80008ae:	0010      	movs	r0, r2
 80008b0:	f000 fe3a 	bl	8001528 <HAL_GPIO_ReadPin>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d104      	bne.n	80008c2 <main+0x56>
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <main+0x68>)
 80008ba:	2110      	movs	r1, #16
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fe6d 	bl	800159c <HAL_GPIO_TogglePin>
	}
	i2c_measure();
 80008c2:	f000 f877 	bl	80009b4 <i2c_measure>
	HAL_Delay(1000);
 80008c6:	23fa      	movs	r3, #250	; 0xfa
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fa12 	bl	8000cf4 <HAL_Delay>
	if(HAL_GPIO_ReadPin(PB0_GPIO_Port,PB0_Pin)==0) {
 80008d0:	e7da      	b.n	8000888 <main+0x1c>
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	50000400 	.word	0x50000400

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b099      	sub	sp, #100	; 0x64
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	242c      	movs	r4, #44	; 0x2c
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	0018      	movs	r0, r3
 80008e4:	2334      	movs	r3, #52	; 0x34
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f003 f803 	bl	80038f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ee:	2318      	movs	r3, #24
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	0018      	movs	r0, r3
 80008f4:	2314      	movs	r3, #20
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f002 fffb 	bl	80038f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fe:	003b      	movs	r3, r7
 8000900:	0018      	movs	r0, r3
 8000902:	2318      	movs	r3, #24
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f002 fff4 	bl	80038f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <SystemClock_Config+0xd4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a27      	ldr	r2, [pc, #156]	; (80009b0 <SystemClock_Config+0xd8>)
 8000912:	401a      	ands	r2, r3
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <SystemClock_Config+0xd4>)
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	0109      	lsls	r1, r1, #4
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800091e:	0021      	movs	r1, r4
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2210      	movs	r2, #16
 8000924:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2201      	movs	r2, #1
 800092a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	22a0      	movs	r2, #160	; 0xa0
 8000936:	0212      	lsls	r2, r2, #8
 8000938:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	187b      	adds	r3, r7, r1
 8000942:	0018      	movs	r0, r3
 8000944:	f001 fc3a 	bl	80021bc <HAL_RCC_OscConfig>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800094c:	f000 f876 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	2118      	movs	r1, #24
 8000952:	187b      	adds	r3, r7, r1
 8000954:	220f      	movs	r2, #15
 8000956:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2100      	movs	r1, #0
 8000974:	0018      	movs	r0, r3
 8000976:	f001 ff9d 	bl	80028b4 <HAL_RCC_ClockConfig>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800097e:	f000 f85d 	bl	8000a3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000982:	003b      	movs	r3, r7
 8000984:	220a      	movs	r2, #10
 8000986:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000988:	003b      	movs	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800098e:	003b      	movs	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	003b      	movs	r3, r7
 8000996:	0018      	movs	r0, r3
 8000998:	f002 f9b0 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009a0:	f000 f84c 	bl	8000a3c <Error_Handler>
  }
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b019      	add	sp, #100	; 0x64
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	40007000 	.word	0x40007000
 80009b0:	ffffe7ff 	.word	0xffffe7ff

080009b4 <i2c_measure>:

/* USER CODE BEGIN 4 */

void i2c_measure() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af02      	add	r7, sp, #8
	uint16_t temp = WAKE_UP;
 80009ba:	1dbb      	adds	r3, r7, #6
 80009bc:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <i2c_measure+0x74>)
 80009be:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS,&temp,2,1000);
 80009c0:	1dba      	adds	r2, r7, #6
 80009c2:	481a      	ldr	r0, [pc, #104]	; (8000a2c <i2c_measure+0x78>)
 80009c4:	23fa      	movs	r3, #250	; 0xfa
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2302      	movs	r3, #2
 80009cc:	21e0      	movs	r1, #224	; 0xe0
 80009ce:	f000 fe97 	bl	8001700 <HAL_I2C_Master_Transmit>
	HAL_Delay(I2C_WAKE_UP_TIME);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 f98e 	bl	8000cf4 <HAL_Delay>
	temp = MEASURE;
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <i2c_measure+0x7c>)
 80009dc:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS,&temp,2,1000);
 80009de:	1dba      	adds	r2, r7, #6
 80009e0:	4812      	ldr	r0, [pc, #72]	; (8000a2c <i2c_measure+0x78>)
 80009e2:	23fa      	movs	r3, #250	; 0xfa
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2302      	movs	r3, #2
 80009ea:	21e0      	movs	r1, #224	; 0xe0
 80009ec:	f000 fe88 	bl	8001700 <HAL_I2C_Master_Transmit>
	HAL_Delay(I2C_MEASURE_TIME);
 80009f0:	200f      	movs	r0, #15
 80009f2:	f000 f97f 	bl	8000cf4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,I2C_ADDRESS,i2c_buff,6,1000);
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <i2c_measure+0x80>)
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <i2c_measure+0x78>)
 80009fa:	23fa      	movs	r3, #250	; 0xfa
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2306      	movs	r3, #6
 8000a02:	21e0      	movs	r1, #224	; 0xe0
 8000a04:	f000 ff84 	bl	8001910 <HAL_I2C_Master_Receive>
	temp = SLEEP;
 8000a08:	1dbb      	adds	r3, r7, #6
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <i2c_measure+0x84>)
 8000a0c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,I2C_ADDRESS,&temp,2,1000);
 8000a0e:	1dba      	adds	r2, r7, #6
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <i2c_measure+0x78>)
 8000a12:	23fa      	movs	r3, #250	; 0xfa
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2302      	movs	r3, #2
 8000a1a:	21e0      	movs	r1, #224	; 0xe0
 8000a1c:	f000 fe70 	bl	8001700 <HAL_I2C_Master_Transmit>
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	00003517 	.word	0x00003517
 8000a2c:	20000084 	.word	0x20000084
 8000a30:	00005c24 	.word	0x00005c24
 8000a34:	200000d8 	.word	0x200000d8
 8000a38:	ffffb098 	.word	0xffffb098

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_MspInit+0x24>)
 8000a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x24>)
 8000a52:	2101      	movs	r1, #1
 8000a54:	430a      	orrs	r2, r1
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <HAL_MspInit+0x24>)
 8000a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_MspInit+0x24>)
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0549      	lsls	r1, r1, #21
 8000a62:	430a      	orrs	r2, r1
 8000a64:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f912 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <MX_USART2_UART_Init+0x5c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1200;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ab4:	2296      	movs	r2, #150	; 0x96
 8000ab6:	00d2      	lsls	r2, r2, #3
 8000ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <MX_USART2_UART_Init+0x58>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f002 fa31 	bl	8002f54 <HAL_HalfDuplex_Init>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000af6:	f7ff ffa1 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000e0 	.word	0x200000e0
 8000b04:	40004400 	.word	0x40004400

08000b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	240c      	movs	r4, #12
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	2314      	movs	r3, #20
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f002 feea 	bl	80038f4 <memset>
  if(uartHandle->Instance==USART2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <HAL_UART_MspInit+0x80>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d129      	bne.n	8000b7e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_UART_MspInit+0x84>)
 8000b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_UART_MspInit+0x84>)
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	0289      	lsls	r1, r1, #10
 8000b34:	430a      	orrs	r2, r1
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_UART_MspInit+0x84>)
 8000b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_UART_MspInit+0x84>)
 8000b3e:	2101      	movs	r1, #1
 8000b40:	430a      	orrs	r2, r1
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_UART_MspInit+0x84>)
 8000b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b50:	0021      	movs	r1, r4
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2204      	movs	r2, #4
 8000b56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2212      	movs	r2, #18
 8000b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2201      	movs	r2, #1
 8000b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2203      	movs	r2, #3
 8000b68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	187a      	adds	r2, r7, r1
 8000b72:	23a0      	movs	r3, #160	; 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fb6f 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b009      	add	sp, #36	; 0x24
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40021000 	.word	0x40021000

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b90:	4813      	ldr	r0, [pc, #76]	; (8000be0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b92:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b94:	f7ff ff83 	bl	8000a9e <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000b98:	4812      	ldr	r0, [pc, #72]	; (8000be4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000b9a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b9c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <LoopForever+0xa>)
    CMP R1, R2
 8000ba0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ba2:	d105      	bne.n	8000bb0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000ba6:	4912      	ldr	r1, [pc, #72]	; (8000bf0 <LoopForever+0x12>)
    STR R1, [R0]
 8000ba8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000baa:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000bac:	4912      	ldr	r1, [pc, #72]	; (8000bf8 <LoopForever+0x1a>)
    STR R1, [R0]
 8000bae:	6001      	str	r1, [r0, #0]

08000bb0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	4812      	ldr	r0, [pc, #72]	; (8000bfc <LoopForever+0x1e>)
  ldr r1, =_edata
 8000bb2:	4913      	ldr	r1, [pc, #76]	; (8000c00 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <LoopForever+0x26>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000bc8:	4c10      	ldr	r4, [pc, #64]	; (8000c0c <LoopForever+0x2e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f002 fe95 	bl	8003904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bda:	f7ff fe47 	bl	800086c <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
   ldr   r0, =_estack
 8000be0:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000be4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000be8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000bec:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000bf0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000bf4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000bf8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c04:	080039e0 	.word	0x080039e0
  ldr r2, =_sbss
 8000c08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c0c:	2000016c 	.word	0x2000016c

08000c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>
	...

08000c14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x3c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_Init+0x3c>)
 8000c26:	2140      	movs	r1, #64	; 0x40
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f811 	bl	8000c54 <HAL_InitTick>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e001      	b.n	8000c42 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3e:	f7ff ff03 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c5e:	681c      	ldr	r4, [r3, #0]
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_InitTick+0x60>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	0019      	movs	r1, r3
 8000c66:	23fa      	movs	r3, #250	; 0xfa
 8000c68:	0098      	lsls	r0, r3, #2
 8000c6a:	f7ff fa4d 	bl	8000108 <__udivsi3>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	0019      	movs	r1, r3
 8000c72:	0020      	movs	r0, r4
 8000c74:	f7ff fa48 	bl	8000108 <__udivsi3>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fae1 	bl	8001242 <HAL_SYSTICK_Config>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e00f      	b.n	8000ca8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d80b      	bhi.n	8000ca6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 fabe 	bl	8001218 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_InitTick+0x64>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b003      	add	sp, #12
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x1c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	18d2      	adds	r2, r2, r3
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_IncTick+0x20>)
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000168 	.word	0x20000168

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <HAL_GetTick+0x10>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000168 	.word	0x20000168

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff fff0 	bl	8000ce0 <HAL_GetTick>
 8000d00:	0003      	movs	r3, r0
 8000d02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	001a      	movs	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	189b      	adds	r3, r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	f7ff ffe0 	bl	8000ce0 <HAL_GetTick>
 8000d20:	0002      	movs	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b004      	add	sp, #16
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e159      	b.n	8001002 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10a      	bne.n	8000d6c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2250      	movs	r2, #80	; 0x50
 8000d60:	2100      	movs	r1, #0
 8000d62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fc10 	bl	800058c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d70:	2210      	movs	r2, #16
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b10      	cmp	r3, #16
 8000d76:	d005      	beq.n	8000d84 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d82:	d00b      	beq.n	8000d9c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d88:	2210      	movs	r2, #16
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2250      	movs	r2, #80	; 0x50
 8000d94:	2100      	movs	r1, #0
 8000d96:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e132      	b.n	8001002 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da0:	4a9a      	ldr	r2, [pc, #616]	; (800100c <HAL_ADC_Init+0x2d0>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	2202      	movs	r2, #2
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2203      	movs	r2, #3
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d108      	bne.n	8000dcc <HAL_ADC_Init+0x90>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <HAL_ADC_Init+0x90>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <HAL_ADC_Init+0x92>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d149      	bne.n	8000e66 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	23c0      	movs	r3, #192	; 0xc0
 8000dd8:	061b      	lsls	r3, r3, #24
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d00b      	beq.n	8000df6 <HAL_ADC_Init+0xba>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d005      	beq.n	8000df6 <HAL_ADC_Init+0xba>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	061b      	lsls	r3, r3, #24
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d111      	bne.n	8000e1a <HAL_ADC_Init+0xde>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	0892      	lsrs	r2, r2, #2
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6919      	ldr	r1, [r3, #16]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	e014      	b.n	8000e44 <HAL_ADC_Init+0x108>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	0892      	lsrs	r2, r2, #2
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	4b79      	ldr	r3, [pc, #484]	; (8001010 <HAL_ADC_Init+0x2d4>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b78      	ldr	r3, [pc, #480]	; (8001010 <HAL_ADC_Init+0x2d4>)
 8000e30:	4978      	ldr	r1, [pc, #480]	; (8001014 <HAL_ADC_Init+0x2d8>)
 8000e32:	400a      	ands	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	4b76      	ldr	r3, [pc, #472]	; (8001010 <HAL_ADC_Init+0x2d4>)
 8000e38:	6819      	ldr	r1, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	4b74      	ldr	r3, [pc, #464]	; (8001010 <HAL_ADC_Init+0x2d4>)
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2118      	movs	r1, #24
 8000e50:	438a      	bics	r2, r1
 8000e52:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68d9      	ldr	r1, [r3, #12]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000e66:	4b6a      	ldr	r3, [pc, #424]	; (8001010 <HAL_ADC_Init+0x2d4>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b69      	ldr	r3, [pc, #420]	; (8001010 <HAL_ADC_Init+0x2d4>)
 8000e6c:	496a      	ldr	r1, [pc, #424]	; (8001018 <HAL_ADC_Init+0x2dc>)
 8000e6e:	400a      	ands	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000e72:	4b67      	ldr	r3, [pc, #412]	; (8001010 <HAL_ADC_Init+0x2d4>)
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7a:	065a      	lsls	r2, r3, #25
 8000e7c:	4b64      	ldr	r3, [pc, #400]	; (8001010 <HAL_ADC_Init+0x2d4>)
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	055b      	lsls	r3, r3, #21
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d108      	bne.n	8000ea2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0549      	lsls	r1, r1, #21
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	495b      	ldr	r1, [pc, #364]	; (800101c <HAL_ADC_Init+0x2e0>)
 8000eae:	400a      	ands	r2, r1
 8000eb0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68d9      	ldr	r1, [r3, #12]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_Init+0x18c>
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	e000      	b.n	8000eca <HAL_ADC_Init+0x18e>
 8000ec8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000eca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2020      	movs	r0, #32
 8000ed0:	5c1b      	ldrb	r3, [r3, r0]
 8000ed2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ed4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	202c      	movs	r0, #44	; 0x2c
 8000eda:	5c1b      	ldrb	r3, [r3, r0]
 8000edc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ede:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ee4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000eec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ef4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f02:	23c2      	movs	r3, #194	; 0xc2
 8000f04:	33ff      	adds	r3, #255	; 0xff
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d00b      	beq.n	8000f22 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68d9      	ldr	r1, [r3, #12]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2221      	movs	r2, #33	; 0x21
 8000f26:	5c9b      	ldrb	r3, [r3, r2]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d11a      	bne.n	8000f62 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2220      	movs	r2, #32
 8000f30:	5c9b      	ldrb	r3, [r3, r2]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d109      	bne.n	8000f4a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0249      	lsls	r1, r1, #9
 8000f44:	430a      	orrs	r2, r1
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	e00b      	b.n	8000f62 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f4e:	2220      	movs	r2, #32
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d11f      	bne.n	8000faa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	492a      	ldr	r1, [pc, #168]	; (8001020 <HAL_ADC_Init+0x2e4>)
 8000f76:	400a      	ands	r2, r1
 8000f78:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6919      	ldr	r1, [r3, #16]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000f88:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000f8e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	e00e      	b.n	8000fc8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d107      	bne.n	8000fc8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	691a      	ldr	r2, [r3, #16]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2107      	movs	r1, #7
 8000fd4:	438a      	bics	r2, r1
 8000fd6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6959      	ldr	r1, [r3, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	4393      	bics	r3, r2
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	fffffefd 	.word	0xfffffefd
 8001010:	40012708 	.word	0x40012708
 8001014:	ffc3ffff 	.word	0xffc3ffff
 8001018:	fdffffff 	.word	0xfdffffff
 800101c:	fffe0219 	.word	0xfffe0219
 8001020:	fffffc03 	.word	0xfffffc03

08001024 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2250      	movs	r2, #80	; 0x50
 8001032:	5c9b      	ldrb	r3, [r3, r2]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d101      	bne.n	800103c <HAL_ADC_ConfigChannel+0x18>
 8001038:	2302      	movs	r3, #2
 800103a:	e050      	b.n	80010de <HAL_ADC_ConfigChannel+0xba>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2250      	movs	r2, #80	; 0x50
 8001040:	2101      	movs	r1, #1
 8001042:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2204      	movs	r2, #4
 800104c:	4013      	ands	r3, r2
 800104e:	d00b      	beq.n	8001068 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001054:	2220      	movs	r2, #32
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2250      	movs	r2, #80	; 0x50
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e03a      	b.n	80010de <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <HAL_ADC_ConfigChannel+0xc4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d018      	beq.n	80010a4 <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	035b      	lsls	r3, r3, #13
 800107e:	0b5a      	lsrs	r2, r3, #13
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	d01f      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_ADC_ConfigChannel+0xc8>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_ADC_ConfigChannel+0xc8>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	03c9      	lsls	r1, r1, #15
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e017      	b.n	80010d4 <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	035b      	lsls	r3, r3, #13
 80010b0:	0b5b      	lsrs	r3, r3, #13
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	400a      	ands	r2, r1
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4013      	ands	r3, r2
 80010c6:	d005      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_ADC_ConfigChannel+0xc8>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_ADC_ConfigChannel+0xc8>)
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <HAL_ADC_ConfigChannel+0xcc>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2250      	movs	r2, #80	; 0x50
 80010d8:	2100      	movs	r1, #0
 80010da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	0018      	movs	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	00001001 	.word	0x00001001
 80010ec:	40012708 	.word	0x40012708
 80010f0:	ffbfffff 	.word	0xffbfffff

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	0002      	movs	r2, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b7f      	cmp	r3, #127	; 0x7f
 8001108:	d828      	bhi.n	800115c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110a:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <__NVIC_SetPriority+0xd4>)
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25b      	sxtb	r3, r3
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	33c0      	adds	r3, #192	; 0xc0
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	589b      	ldr	r3, [r3, r2]
 800111a:	1dfa      	adds	r2, r7, #7
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	0011      	movs	r1, r2
 8001120:	2203      	movs	r2, #3
 8001122:	400a      	ands	r2, r1
 8001124:	00d2      	lsls	r2, r2, #3
 8001126:	21ff      	movs	r1, #255	; 0xff
 8001128:	4091      	lsls	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	43d2      	mvns	r2, r2
 800112e:	401a      	ands	r2, r3
 8001130:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	22ff      	movs	r2, #255	; 0xff
 8001138:	401a      	ands	r2, r3
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	0018      	movs	r0, r3
 8001140:	2303      	movs	r3, #3
 8001142:	4003      	ands	r3, r0
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001148:	481f      	ldr	r0, [pc, #124]	; (80011c8 <__NVIC_SetPriority+0xd4>)
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b25b      	sxtb	r3, r3
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	430a      	orrs	r2, r1
 8001154:	33c0      	adds	r3, #192	; 0xc0
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800115a:	e031      	b.n	80011c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <__NVIC_SetPriority+0xd8>)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	0019      	movs	r1, r3
 8001164:	230f      	movs	r3, #15
 8001166:	400b      	ands	r3, r1
 8001168:	3b08      	subs	r3, #8
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3306      	adds	r3, #6
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	3304      	adds	r3, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1dfa      	adds	r2, r7, #7
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	0011      	movs	r1, r2
 800117c:	2203      	movs	r2, #3
 800117e:	400a      	ands	r2, r1
 8001180:	00d2      	lsls	r2, r2, #3
 8001182:	21ff      	movs	r1, #255	; 0xff
 8001184:	4091      	lsls	r1, r2
 8001186:	000a      	movs	r2, r1
 8001188:	43d2      	mvns	r2, r2
 800118a:	401a      	ands	r2, r3
 800118c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	019b      	lsls	r3, r3, #6
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	401a      	ands	r2, r3
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	0018      	movs	r0, r3
 800119c:	2303      	movs	r3, #3
 800119e:	4003      	ands	r3, r0
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <__NVIC_SetPriority+0xd8>)
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	001c      	movs	r4, r3
 80011ac:	230f      	movs	r3, #15
 80011ae:	4023      	ands	r3, r4
 80011b0:	3b08      	subs	r3, #8
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	430a      	orrs	r2, r1
 80011b6:	3306      	adds	r3, #6
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	18c3      	adds	r3, r0, r3
 80011bc:	3304      	adds	r3, #4
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b003      	add	sp, #12
 80011c6:	bd90      	pop	{r4, r7, pc}
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	045b      	lsls	r3, r3, #17
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d301      	bcc.n	80011e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e4:	2301      	movs	r3, #1
 80011e6:	e010      	b.n	800120a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <SysTick_Config+0x44>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	3a01      	subs	r2, #1
 80011ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f0:	2301      	movs	r3, #1
 80011f2:	425b      	negs	r3, r3
 80011f4:	2103      	movs	r1, #3
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff ff7c 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x44>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x44>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	210f      	movs	r1, #15
 8001224:	187b      	adds	r3, r7, r1
 8001226:	1c02      	adds	r2, r0, #0
 8001228:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	187b      	adds	r3, r7, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b25b      	sxtb	r3, r3
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b004      	add	sp, #16
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff ffbf 	bl	80011d0 <SysTick_Config>
 8001252:	0003      	movs	r3, r0
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b002      	add	sp, #8
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001272:	e143      	b.n	80014fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4091      	lsls	r1, r2
 800127e:	000a      	movs	r2, r1
 8001280:	4013      	ands	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d100      	bne.n	800128c <HAL_GPIO_Init+0x30>
 800128a:	e134      	b.n	80014f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	4013      	ands	r3, r2
 8001294:	2b01      	cmp	r3, #1
 8001296:	d005      	beq.n	80012a4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2203      	movs	r2, #3
 800129e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d130      	bne.n	8001306 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012da:	2201      	movs	r2, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	2201      	movs	r2, #1
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	4013      	ands	r3, r2
 800130e:	2b03      	cmp	r3, #3
 8001310:	d017      	beq.n	8001342 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	4013      	ands	r3, r2
 800134a:	2b02      	cmp	r3, #2
 800134c:	d123      	bne.n	8001396 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	58d3      	ldr	r3, [r2, r3]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2207      	movs	r2, #7
 8001360:	4013      	ands	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	43da      	mvns	r2, r3
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2107      	movs	r1, #7
 800137a:	400b      	ands	r3, r1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	6939      	ldr	r1, [r7, #16]
 8001394:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	43da      	mvns	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2203      	movs	r2, #3
 80013b4:	401a      	ands	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	23c0      	movs	r3, #192	; 0xc0
 80013d0:	029b      	lsls	r3, r3, #10
 80013d2:	4013      	ands	r3, r2
 80013d4:	d100      	bne.n	80013d8 <HAL_GPIO_Init+0x17c>
 80013d6:	e08e      	b.n	80014f6 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d8:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 80013da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013dc:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <HAL_GPIO_Init+0x2b8>)
 80013de:	2101      	movs	r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e4:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_GPIO_Init+0x2bc>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	589b      	ldr	r3, [r3, r2]
 80013f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2203      	movs	r2, #3
 80013f6:	4013      	ands	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	43da      	mvns	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	23a0      	movs	r3, #160	; 0xa0
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	429a      	cmp	r2, r3
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x1d2>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a41      	ldr	r2, [pc, #260]	; (800151c <HAL_GPIO_Init+0x2c0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x1ce>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a40      	ldr	r2, [pc, #256]	; (8001520 <HAL_GPIO_Init+0x2c4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x1ca>
 8001422:	2302      	movs	r3, #2
 8001424:	e004      	b.n	8001430 <HAL_GPIO_Init+0x1d4>
 8001426:	2306      	movs	r3, #6
 8001428:	e002      	b.n	8001430 <HAL_GPIO_Init+0x1d4>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <HAL_GPIO_Init+0x1d4>
 800142e:	2300      	movs	r3, #0
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	2103      	movs	r1, #3
 8001434:	400a      	ands	r2, r1
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4093      	lsls	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001440:	4935      	ldr	r1, [pc, #212]	; (8001518 <HAL_GPIO_Init+0x2bc>)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144e:	4b35      	ldr	r3, [pc, #212]	; (8001524 <HAL_GPIO_Init+0x2c8>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	035b      	lsls	r3, r3, #13
 8001466:	4013      	ands	r3, r2
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <HAL_GPIO_Init+0x2c8>)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <HAL_GPIO_Init+0x2c8>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43da      	mvns	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	039b      	lsls	r3, r3, #14
 8001490:	4013      	ands	r3, r2
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_GPIO_Init+0x2c8>)
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_GPIO_Init+0x2c8>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43da      	mvns	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	4013      	ands	r3, r2
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_GPIO_Init+0x2c8>)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_GPIO_Init+0x2c8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43da      	mvns	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	025b      	lsls	r3, r3, #9
 80014e4:	4013      	ands	r3, r2
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_GPIO_Init+0x2c8>)
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	40da      	lsrs	r2, r3
 8001504:	1e13      	subs	r3, r2, #0
 8001506:	d000      	beq.n	800150a <HAL_GPIO_Init+0x2ae>
 8001508:	e6b4      	b.n	8001274 <HAL_GPIO_Init+0x18>
  }
}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b006      	add	sp, #24
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	50000400 	.word	0x50000400
 8001520:	50000800 	.word	0x50000800
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	000a      	movs	r2, r1
 8001532:	1cbb      	adds	r3, r7, #2
 8001534:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	1cba      	adds	r2, r7, #2
 800153c:	8812      	ldrh	r2, [r2, #0]
 800153e:	4013      	ands	r3, r2
 8001540:	d004      	beq.n	800154c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001542:	230f      	movs	r3, #15
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e003      	b.n	8001554 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154c:	230f      	movs	r3, #15
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	781b      	ldrb	r3, [r3, #0]
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b004      	add	sp, #16
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	0008      	movs	r0, r1
 800156c:	0011      	movs	r1, r2
 800156e:	1cbb      	adds	r3, r7, #2
 8001570:	1c02      	adds	r2, r0, #0
 8001572:	801a      	strh	r2, [r3, #0]
 8001574:	1c7b      	adds	r3, r7, #1
 8001576:	1c0a      	adds	r2, r1, #0
 8001578:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800157a:	1c7b      	adds	r3, r7, #1
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001582:	1cbb      	adds	r3, r7, #2
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800158a:	e003      	b.n	8001594 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800158c:	1cbb      	adds	r3, r7, #2
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	000a      	movs	r2, r1
 80015a6:	1cbb      	adds	r3, r7, #2
 80015a8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b0:	1cbb      	adds	r3, r7, #2
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4013      	ands	r3, r2
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	1cb9      	adds	r1, r7, #2
 80015c0:	8809      	ldrh	r1, [r1, #0]
 80015c2:	400b      	ands	r3, r1
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b004      	add	sp, #16
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e082      	b.n	80016ec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2241      	movs	r2, #65	; 0x41
 80015ea:	5c9b      	ldrb	r3, [r3, r2]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d107      	bne.n	8001602 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2240      	movs	r2, #64	; 0x40
 80015f6:	2100      	movs	r1, #0
 80015f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff f8f1 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2241      	movs	r2, #65	; 0x41
 8001606:	2124      	movs	r1, #36	; 0x24
 8001608:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	438a      	bics	r2, r1
 8001618:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4934      	ldr	r1, [pc, #208]	; (80016f4 <HAL_I2C_Init+0x120>)
 8001624:	400a      	ands	r2, r1
 8001626:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4931      	ldr	r1, [pc, #196]	; (80016f8 <HAL_I2C_Init+0x124>)
 8001634:	400a      	ands	r2, r1
 8001636:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	0209      	lsls	r1, r1, #8
 800164c:	430a      	orrs	r2, r1
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e007      	b.n	8001662 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2184      	movs	r1, #132	; 0x84
 800165c:	0209      	lsls	r1, r1, #8
 800165e:	430a      	orrs	r2, r1
 8001660:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d104      	bne.n	8001674 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	491f      	ldr	r1, [pc, #124]	; (80016fc <HAL_I2C_Init+0x128>)
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	491a      	ldr	r1, [pc, #104]	; (80016f8 <HAL_I2C_Init+0x124>)
 8001690:	400a      	ands	r2, r1
 8001692:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	431a      	orrs	r2, r3
 800169e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69d9      	ldr	r1, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1a      	ldr	r2, [r3, #32]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2241      	movs	r2, #65	; 0x41
 80016d8:	2120      	movs	r1, #32
 80016da:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2242      	movs	r2, #66	; 0x42
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	f0ffffff 	.word	0xf0ffffff
 80016f8:	ffff7fff 	.word	0xffff7fff
 80016fc:	02008000 	.word	0x02008000

08001700 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af02      	add	r7, sp, #8
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	0008      	movs	r0, r1
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	0019      	movs	r1, r3
 800170e:	230a      	movs	r3, #10
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	1c02      	adds	r2, r0, #0
 8001714:	801a      	strh	r2, [r3, #0]
 8001716:	2308      	movs	r3, #8
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	1c0a      	adds	r2, r1, #0
 800171c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2241      	movs	r2, #65	; 0x41
 8001722:	5c9b      	ldrb	r3, [r3, r2]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b20      	cmp	r3, #32
 8001728:	d000      	beq.n	800172c <HAL_I2C_Master_Transmit+0x2c>
 800172a:	e0e7      	b.n	80018fc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	5c9b      	ldrb	r3, [r3, r2]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_I2C_Master_Transmit+0x3a>
 8001736:	2302      	movs	r3, #2
 8001738:	e0e1      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1fe>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	2101      	movs	r1, #1
 8001740:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001742:	f7ff facd 	bl	8000ce0 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	0219      	lsls	r1, r3, #8
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2319      	movs	r3, #25
 8001756:	2201      	movs	r2, #1
 8001758:	f000 fa04 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cc      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2241      	movs	r2, #65	; 0x41
 8001768:	2121      	movs	r1, #33	; 0x21
 800176a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2242      	movs	r2, #66	; 0x42
 8001770:	2110      	movs	r1, #16
 8001772:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2208      	movs	r2, #8
 8001784:	18ba      	adds	r2, r7, r2
 8001786:	8812      	ldrh	r2, [r2, #0]
 8001788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	d911      	bls.n	80017be <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	22ff      	movs	r2, #255	; 0xff
 800179e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	045c      	lsls	r4, r3, #17
 80017aa:	230a      	movs	r3, #10
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	8819      	ldrh	r1, [r3, #0]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	4b55      	ldr	r3, [pc, #340]	; (8001908 <HAL_I2C_Master_Transmit+0x208>)
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	0023      	movs	r3, r4
 80017b8:	f000 fc2e 	bl	8002018 <I2C_TransferConfig>
 80017bc:	e075      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	049c      	lsls	r4, r3, #18
 80017d2:	230a      	movs	r3, #10
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	8819      	ldrh	r1, [r3, #0]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <HAL_I2C_Master_Transmit+0x208>)
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	0023      	movs	r3, r4
 80017e0:	f000 fc1a 	bl	8002018 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017e4:	e061      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 fa07 	bl	8001c00 <I2C_WaitOnTXISFlagUntilTimeout>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e081      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d03a      	beq.n	80018aa <HAL_I2C_Master_Transmit+0x1aa>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001838:	2b00      	cmp	r3, #0
 800183a:	d136      	bne.n	80018aa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800183c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	0013      	movs	r3, r2
 8001846:	2200      	movs	r2, #0
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	f000 f98b 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e053      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	2bff      	cmp	r3, #255	; 0xff
 800185e:	d911      	bls.n	8001884 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	22ff      	movs	r2, #255	; 0xff
 8001864:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186a:	b2da      	uxtb	r2, r3
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	045c      	lsls	r4, r3, #17
 8001870:	230a      	movs	r3, #10
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	8819      	ldrh	r1, [r3, #0]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	2300      	movs	r3, #0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	0023      	movs	r3, r4
 800187e:	f000 fbcb 	bl	8002018 <I2C_TransferConfig>
 8001882:	e012      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001892:	b2da      	uxtb	r2, r3
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	049c      	lsls	r4, r3, #18
 8001898:	230a      	movs	r3, #10
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	8819      	ldrh	r1, [r3, #0]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	2300      	movs	r3, #0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	0023      	movs	r3, r4
 80018a6:	f000 fbb7 	bl	8002018 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d198      	bne.n	80017e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 f9e6 	bl	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80018c0:	1e03      	subs	r3, r0, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e01a      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2220      	movs	r2, #32
 80018ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	490c      	ldr	r1, [pc, #48]	; (800190c <HAL_I2C_Master_Transmit+0x20c>)
 80018dc:	400a      	ands	r2, r1
 80018de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2241      	movs	r2, #65	; 0x41
 80018e4:	2120      	movs	r1, #32
 80018e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2242      	movs	r2, #66	; 0x42
 80018ec:	2100      	movs	r1, #0
 80018ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2240      	movs	r2, #64	; 0x40
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80018fc:	2302      	movs	r3, #2
  }
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b007      	add	sp, #28
 8001904:	bd90      	pop	{r4, r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	80002000 	.word	0x80002000
 800190c:	fe00e800 	.word	0xfe00e800

08001910 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af02      	add	r7, sp, #8
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	0008      	movs	r0, r1
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	0019      	movs	r1, r3
 800191e:	230a      	movs	r3, #10
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	1c02      	adds	r2, r0, #0
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	2308      	movs	r3, #8
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	1c0a      	adds	r2, r1, #0
 800192c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2241      	movs	r2, #65	; 0x41
 8001932:	5c9b      	ldrb	r3, [r3, r2]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b20      	cmp	r3, #32
 8001938:	d000      	beq.n	800193c <HAL_I2C_Master_Receive+0x2c>
 800193a:	e0e8      	b.n	8001b0e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	5c9b      	ldrb	r3, [r3, r2]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_I2C_Master_Receive+0x3a>
 8001946:	2302      	movs	r3, #2
 8001948:	e0e2      	b.n	8001b10 <HAL_I2C_Master_Receive+0x200>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2240      	movs	r2, #64	; 0x40
 800194e:	2101      	movs	r1, #1
 8001950:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001952:	f7ff f9c5 	bl	8000ce0 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	0219      	lsls	r1, r3, #8
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2319      	movs	r3, #25
 8001966:	2201      	movs	r2, #1
 8001968:	f000 f8fc 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 800196c:	1e03      	subs	r3, r0, #0
 800196e:	d001      	beq.n	8001974 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0cd      	b.n	8001b10 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2241      	movs	r2, #65	; 0x41
 8001978:	2122      	movs	r1, #34	; 0x22
 800197a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2242      	movs	r2, #66	; 0x42
 8001980:	2110      	movs	r1, #16
 8001982:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2208      	movs	r2, #8
 8001994:	18ba      	adds	r2, r7, r2
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d911      	bls.n	80019ce <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	045c      	lsls	r4, r3, #17
 80019ba:	230a      	movs	r3, #10
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	8819      	ldrh	r1, [r3, #0]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	4b55      	ldr	r3, [pc, #340]	; (8001b18 <HAL_I2C_Master_Receive+0x208>)
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	0023      	movs	r3, r4
 80019c8:	f000 fb26 	bl	8002018 <I2C_TransferConfig>
 80019cc:	e076      	b.n	8001abc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	049c      	lsls	r4, r3, #18
 80019e2:	230a      	movs	r3, #10
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	8819      	ldrh	r1, [r3, #0]
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <HAL_I2C_Master_Receive+0x208>)
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	0023      	movs	r3, r4
 80019f0:	f000 fb12 	bl	8002018 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019f4:	e062      	b.n	8001abc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 f989 	bl	8001d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e082      	b.n	8001b10 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d03a      	beq.n	8001abc <HAL_I2C_Master_Receive+0x1ac>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d136      	bne.n	8001abc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	0013      	movs	r3, r2
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	f000 f882 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e053      	b.n	8001b10 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2bff      	cmp	r3, #255	; 0xff
 8001a70:	d911      	bls.n	8001a96 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	22ff      	movs	r2, #255	; 0xff
 8001a76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	045c      	lsls	r4, r3, #17
 8001a82:	230a      	movs	r3, #10
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	8819      	ldrh	r1, [r3, #0]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	0023      	movs	r3, r4
 8001a90:	f000 fac2 	bl	8002018 <I2C_TransferConfig>
 8001a94:	e012      	b.n	8001abc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	049c      	lsls	r4, r3, #18
 8001aaa:	230a      	movs	r3, #10
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	8819      	ldrh	r1, [r3, #0]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	0023      	movs	r3, r4
 8001ab8:	f000 faae 	bl	8002018 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d197      	bne.n	80019f6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f000 f8dd 	bl	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e01a      	b.n	8001b10 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	490b      	ldr	r1, [pc, #44]	; (8001b1c <HAL_I2C_Master_Receive+0x20c>)
 8001aee:	400a      	ands	r2, r1
 8001af0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2241      	movs	r2, #65	; 0x41
 8001af6:	2120      	movs	r1, #32
 8001af8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2242      	movs	r2, #66	; 0x42
 8001afe:	2100      	movs	r1, #0
 8001b00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	2100      	movs	r1, #0
 8001b08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001b0e:	2302      	movs	r3, #2
  }
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b007      	add	sp, #28
 8001b16:	bd90      	pop	{r4, r7, pc}
 8001b18:	80002400 	.word	0x80002400
 8001b1c:	fe00e800 	.word	0xfe00e800

08001b20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d103      	bne.n	8001b3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d007      	beq.n	8001b5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2101      	movs	r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	619a      	str	r2, [r3, #24]
  }
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b74:	e030      	b.n	8001bd8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	d02d      	beq.n	8001bd8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7c:	f7ff f8b0 	bl	8000ce0 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d302      	bcc.n	8001b92 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d122      	bne.n	8001bd8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	425a      	negs	r2, r3
 8001ba2:	4153      	adcs	r3, r2
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d113      	bne.n	8001bd8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2241      	movs	r2, #65	; 0x41
 8001bc0:	2120      	movs	r1, #32
 8001bc2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2242      	movs	r2, #66	; 0x42
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e00f      	b.n	8001bf8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	4013      	ands	r3, r2
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	425a      	negs	r2, r3
 8001be8:	4153      	adcs	r3, r2
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	001a      	movs	r2, r3
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d0bf      	beq.n	8001b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b004      	add	sp, #16
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c0c:	e032      	b.n	8001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f000 f8ff 	bl	8001e18 <I2C_IsErrorOccurred>
 8001c1a:	1e03      	subs	r3, r0, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e030      	b.n	8001c84 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	d025      	beq.n	8001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c28:	f7ff f85a 	bl	8000ce0 <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d302      	bcc.n	8001c3e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d11a      	bne.n	8001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d013      	beq.n	8001c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	2220      	movs	r2, #32
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2241      	movs	r2, #65	; 0x41
 8001c5c:	2120      	movs	r1, #32
 8001c5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2242      	movs	r2, #66	; 0x42
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2240      	movs	r2, #64	; 0x40
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e007      	b.n	8001c84 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d1c5      	bne.n	8001c0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b004      	add	sp, #16
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c98:	e02f      	b.n	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 f8b9 	bl	8001e18 <I2C_IsErrorOccurred>
 8001ca6:	1e03      	subs	r3, r0, #0
 8001ca8:	d001      	beq.n	8001cae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e02d      	b.n	8001d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cae:	f7ff f817 	bl	8000ce0 <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d302      	bcc.n	8001cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11a      	bne.n	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d013      	beq.n	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2241      	movs	r2, #65	; 0x41
 8001ce2:	2120      	movs	r1, #32
 8001ce4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2242      	movs	r2, #66	; 0x42
 8001cea:	2100      	movs	r1, #0
 8001cec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e007      	b.n	8001d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2220      	movs	r2, #32
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d1c8      	bne.n	8001c9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b004      	add	sp, #16
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d20:	e06b      	b.n	8001dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f000 f875 	bl	8001e18 <I2C_IsErrorOccurred>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e069      	b.n	8001e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d138      	bne.n	8001db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d105      	bne.n	8001d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e055      	b.n	8001e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2210      	movs	r2, #16
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d107      	bne.n	8001d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2210      	movs	r2, #16
 8001d72:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2204      	movs	r2, #4
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
 8001d7a:	e002      	b.n	8001d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2220      	movs	r2, #32
 8001d88:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	491f      	ldr	r1, [pc, #124]	; (8001e14 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001d96:	400a      	ands	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2241      	movs	r2, #65	; 0x41
 8001d9e:	2120      	movs	r1, #32
 8001da0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2242      	movs	r2, #66	; 0x42
 8001da6:	2100      	movs	r1, #0
 8001da8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	2100      	movs	r1, #0
 8001db0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e029      	b.n	8001e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7fe ff93 	bl	8000ce0 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d116      	bne.n	8001dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d00f      	beq.n	8001dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	2220      	movs	r2, #32
 8001de0:	431a      	orrs	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2241      	movs	r2, #65	; 0x41
 8001dea:	2120      	movs	r1, #32
 8001dec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	2100      	movs	r1, #0
 8001df4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e007      	b.n	8001e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2204      	movs	r2, #4
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d18c      	bne.n	8001d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b004      	add	sp, #16
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	fe00e800 	.word	0xfe00e800

08001e18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b08b      	sub	sp, #44	; 0x2c
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2327      	movs	r3, #39	; 0x27
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2210      	movs	r2, #16
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <I2C_IsErrorOccurred+0x2e>
 8001e44:	e082      	b.n	8001f4c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e4e:	e060      	b.n	8001f12 <I2C_IsErrorOccurred+0xfa>
 8001e50:	2427      	movs	r4, #39	; 0x27
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	193a      	adds	r2, r7, r4
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	d058      	beq.n	8001f12 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e60:	f7fe ff3e 	bl	8000ce0 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d306      	bcc.n	8001e7e <I2C_IsErrorOccurred+0x66>
 8001e70:	193b      	adds	r3, r7, r4
 8001e72:	193a      	adds	r2, r7, r4
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d149      	bne.n	8001f12 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	01db      	lsls	r3, r3, #7
 8001e88:	4013      	ands	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e8c:	2013      	movs	r0, #19
 8001e8e:	183b      	adds	r3, r7, r0
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	2142      	movs	r1, #66	; 0x42
 8001e94:	5c52      	ldrb	r2, [r2, r1]
 8001e96:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d126      	bne.n	8001efa <I2C_IsErrorOccurred+0xe2>
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	01db      	lsls	r3, r3, #7
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d021      	beq.n	8001efa <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001eb6:	183b      	adds	r3, r7, r0
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d01d      	beq.n	8001efa <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	01c9      	lsls	r1, r1, #7
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ed0:	f7fe ff06 	bl	8000ce0 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ed8:	e00f      	b.n	8001efa <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001eda:	f7fe ff01 	bl	8000ce0 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b19      	cmp	r3, #25
 8001ee6:	d908      	bls.n	8001efa <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	2220      	movs	r2, #32
 8001eec:	4313      	orrs	r3, r2
 8001eee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ef0:	2327      	movs	r3, #39	; 0x27
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]

              break;
 8001ef8:	e00b      	b.n	8001f12 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2220      	movs	r2, #32
 8001f02:	4013      	ands	r3, r2
 8001f04:	2127      	movs	r1, #39	; 0x27
 8001f06:	187a      	adds	r2, r7, r1
 8001f08:	1879      	adds	r1, r7, r1
 8001f0a:	7809      	ldrb	r1, [r1, #0]
 8001f0c:	7011      	strb	r1, [r2, #0]
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d1e3      	bne.n	8001eda <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d004      	beq.n	8001f2a <I2C_IsErrorOccurred+0x112>
 8001f20:	2327      	movs	r3, #39	; 0x27
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d092      	beq.n	8001e50 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f2a:	2327      	movs	r3, #39	; 0x27
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d103      	bne.n	8001f3c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	4313      	orrs	r3, r2
 8001f42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f44:	2327      	movs	r3, #39	; 0x27
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d00c      	beq.n	8001f78 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	2201      	movs	r2, #1
 8001f62:	4313      	orrs	r3, r2
 8001f64:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	0052      	lsls	r2, r2, #1
 8001f6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f70:	2327      	movs	r3, #39	; 0x27
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d00c      	beq.n	8001f9c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	2208      	movs	r2, #8
 8001f86:	4313      	orrs	r3, r2
 8001f88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	00d2      	lsls	r2, r2, #3
 8001f92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f94:	2327      	movs	r3, #39	; 0x27
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d00c      	beq.n	8001fc0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4313      	orrs	r3, r2
 8001fac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb8:	2327      	movs	r3, #39	; 0x27
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001fc0:	2327      	movs	r3, #39	; 0x27
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d01d      	beq.n	8002006 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff fda7 	bl	8001b20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	490d      	ldr	r1, [pc, #52]	; (8002014 <I2C_IsErrorOccurred+0x1fc>)
 8001fde:	400a      	ands	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2241      	movs	r2, #65	; 0x41
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2242      	movs	r2, #66	; 0x42
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2240      	movs	r2, #64	; 0x40
 8002002:	2100      	movs	r1, #0
 8002004:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002006:	2327      	movs	r3, #39	; 0x27
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	781b      	ldrb	r3, [r3, #0]
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b00b      	add	sp, #44	; 0x2c
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	fe00e800 	.word	0xfe00e800

08002018 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	0008      	movs	r0, r1
 8002022:	0011      	movs	r1, r2
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	240a      	movs	r4, #10
 8002028:	193b      	adds	r3, r7, r4
 800202a:	1c02      	adds	r2, r0, #0
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	2009      	movs	r0, #9
 8002030:	183b      	adds	r3, r7, r0
 8002032:	1c0a      	adds	r2, r1, #0
 8002034:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002036:	193b      	adds	r3, r7, r4
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	059b      	lsls	r3, r3, #22
 800203c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800203e:	183b      	adds	r3, r7, r0
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	0419      	lsls	r1, r3, #16
 8002044:	23ff      	movs	r3, #255	; 0xff
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800204a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002052:	4313      	orrs	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002062:	0d51      	lsrs	r1, r2, #21
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	00d2      	lsls	r2, r2, #3
 8002068:	400a      	ands	r2, r1
 800206a:	4907      	ldr	r1, [pc, #28]	; (8002088 <I2C_TransferConfig+0x70>)
 800206c:	430a      	orrs	r2, r1
 800206e:	43d2      	mvns	r2, r2
 8002070:	401a      	ands	r2, r3
 8002072:	0011      	movs	r1, r2
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b007      	add	sp, #28
 8002084:	bd90      	pop	{r4, r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	03ff63ff 	.word	0x03ff63ff

0800208c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2241      	movs	r2, #65	; 0x41
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d138      	bne.n	8002114 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2240      	movs	r2, #64	; 0x40
 80020a6:	5c9b      	ldrb	r3, [r3, r2]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e032      	b.n	8002116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	2101      	movs	r1, #1
 80020b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2241      	movs	r2, #65	; 0x41
 80020bc:	2124      	movs	r1, #36	; 0x24
 80020be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2101      	movs	r1, #1
 80020cc:	438a      	bics	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4911      	ldr	r1, [pc, #68]	; (8002120 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020dc:	400a      	ands	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2241      	movs	r2, #65	; 0x41
 8002104:	2120      	movs	r1, #32
 8002106:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2240      	movs	r2, #64	; 0x40
 800210c:	2100      	movs	r1, #0
 800210e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b002      	add	sp, #8
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	ffffefff 	.word	0xffffefff

08002124 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2241      	movs	r2, #65	; 0x41
 8002132:	5c9b      	ldrb	r3, [r3, r2]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b20      	cmp	r3, #32
 8002138:	d139      	bne.n	80021ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2240      	movs	r2, #64	; 0x40
 800213e:	5c9b      	ldrb	r3, [r3, r2]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002144:	2302      	movs	r3, #2
 8002146:	e033      	b.n	80021b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2240      	movs	r2, #64	; 0x40
 800214c:	2101      	movs	r1, #1
 800214e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2241      	movs	r2, #65	; 0x41
 8002154:	2124      	movs	r1, #36	; 0x24
 8002156:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2101      	movs	r1, #1
 8002164:	438a      	bics	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	430a      	orrs	r2, r1
 8002198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2241      	movs	r2, #65	; 0x41
 800219e:	2120      	movs	r1, #32
 80021a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	2100      	movs	r1, #0
 80021a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
  }
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	fffff0ff 	.word	0xfffff0ff

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f000 fb6c 	bl	80028a8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d0:	4bc8      	ldr	r3, [pc, #800]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	220c      	movs	r2, #12
 80021d6:	4013      	ands	r3, r2
 80021d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021da:	4bc6      	ldr	r3, [pc, #792]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	025b      	lsls	r3, r3, #9
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2201      	movs	r2, #1
 80021ec:	4013      	ands	r3, r2
 80021ee:	d100      	bne.n	80021f2 <HAL_RCC_OscConfig+0x36>
 80021f0:	e07d      	b.n	80022ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d007      	beq.n	8002208 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d112      	bne.n	8002224 <HAL_RCC_OscConfig+0x68>
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	025b      	lsls	r3, r3, #9
 8002204:	429a      	cmp	r2, r3
 8002206:	d10d      	bne.n	8002224 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	4bba      	ldr	r3, [pc, #744]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	029b      	lsls	r3, r3, #10
 8002210:	4013      	ands	r3, r2
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x5a>
 8002214:	e06a      	b.n	80022ec <HAL_RCC_OscConfig+0x130>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d166      	bne.n	80022ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f000 fb42 	bl	80028a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x84>
 8002230:	4bb0      	ldr	r3, [pc, #704]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4baf      	ldr	r3, [pc, #700]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	0249      	lsls	r1, r1, #9
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e027      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	23a0      	movs	r3, #160	; 0xa0
 8002246:	02db      	lsls	r3, r3, #11
 8002248:	429a      	cmp	r2, r3
 800224a:	d10e      	bne.n	800226a <HAL_RCC_OscConfig+0xae>
 800224c:	4ba9      	ldr	r3, [pc, #676]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4ba8      	ldr	r3, [pc, #672]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	02c9      	lsls	r1, r1, #11
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4ba6      	ldr	r3, [pc, #664]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4ba5      	ldr	r3, [pc, #660]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	0249      	lsls	r1, r1, #9
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e012      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 800226a:	4ba2      	ldr	r3, [pc, #648]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4ba1      	ldr	r3, [pc, #644]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002270:	49a1      	ldr	r1, [pc, #644]	; (80024f8 <HAL_RCC_OscConfig+0x33c>)
 8002272:	400a      	ands	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	4b9f      	ldr	r3, [pc, #636]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	4013      	ands	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4b9b      	ldr	r3, [pc, #620]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b9a      	ldr	r3, [pc, #616]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800228a:	499c      	ldr	r1, [pc, #624]	; (80024fc <HAL_RCC_OscConfig+0x340>)
 800228c:	400a      	ands	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d014      	beq.n	80022c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fd22 	bl	8000ce0 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a2:	f7fe fd1d 	bl	8000ce0 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e2f9      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022b4:	4b8f      	ldr	r3, [pc, #572]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	4013      	ands	r3, r2
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0xe6>
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fd0d 	bl	8000ce0 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fd08 	bl	8000ce0 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e2e4      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022de:	4b85      	ldr	r3, [pc, #532]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x110>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d100      	bne.n	80022fa <HAL_RCC_OscConfig+0x13e>
 80022f8:	e099      	b.n	800242e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	2220      	movs	r2, #32
 8002304:	4013      	ands	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002308:	4b7a      	ldr	r3, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b79      	ldr	r3, [pc, #484]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800230e:	2120      	movs	r1, #32
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	2220      	movs	r2, #32
 8002318:	4393      	bics	r3, r2
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d13e      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1ea>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d13b      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800232e:	4b71      	ldr	r3, [pc, #452]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2204      	movs	r2, #4
 8002334:	4013      	ands	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_RCC_OscConfig+0x186>
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e2b2      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b6c      	ldr	r3, [pc, #432]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x344>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	021a      	lsls	r2, r3, #8
 8002352:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002358:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2209      	movs	r2, #9
 800235e:	4393      	bics	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	4b64      	ldr	r3, [pc, #400]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236a:	f000 fbeb 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 800236e:	0001      	movs	r1, r0
 8002370:	4b60      	ldr	r3, [pc, #384]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	220f      	movs	r2, #15
 8002378:	4013      	ands	r3, r2
 800237a:	4a62      	ldr	r2, [pc, #392]	; (8002504 <HAL_RCC_OscConfig+0x348>)
 800237c:	5cd3      	ldrb	r3, [r2, r3]
 800237e:	000a      	movs	r2, r1
 8002380:	40da      	lsrs	r2, r3
 8002382:	4b61      	ldr	r3, [pc, #388]	; (8002508 <HAL_RCC_OscConfig+0x34c>)
 8002384:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002386:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_RCC_OscConfig+0x350>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2513      	movs	r5, #19
 800238c:	197c      	adds	r4, r7, r5
 800238e:	0018      	movs	r0, r3
 8002390:	f7fe fc60 	bl	8000c54 <HAL_InitTick>
 8002394:	0003      	movs	r3, r0
 8002396:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002398:	197b      	adds	r3, r7, r5
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d046      	beq.n	800242e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80023a0:	197b      	adds	r3, r7, r5
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	e280      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d027      	beq.n	80023fc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023ac:	4b51      	ldr	r3, [pc, #324]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2209      	movs	r2, #9
 80023b2:	4393      	bics	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fc8f 	bl	8000ce0 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7fe fc8a 	bl	8000ce0 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e266      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	4013      	ands	r3, r2
 80023e2:	d0f1      	beq.n	80023c8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b43      	ldr	r3, [pc, #268]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a45      	ldr	r2, [pc, #276]	; (8002500 <HAL_RCC_OscConfig+0x344>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	e018      	b.n	800242e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fc:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b3c      	ldr	r3, [pc, #240]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002402:	2101      	movs	r1, #1
 8002404:	438a      	bics	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fc6a 	bl	8000ce0 <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002412:	f7fe fc65 	bl	8000ce0 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e241      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002424:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2204      	movs	r2, #4
 800242a:	4013      	ands	r3, r2
 800242c:	d1f1      	bne.n	8002412 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2210      	movs	r2, #16
 8002434:	4013      	ands	r3, r2
 8002436:	d100      	bne.n	800243a <HAL_RCC_OscConfig+0x27e>
 8002438:	e0a1      	b.n	800257e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d140      	bne.n	80024c2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002440:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4013      	ands	r3, r2
 800244a:	d005      	beq.n	8002458 <HAL_RCC_OscConfig+0x29c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e227      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002458:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a2c      	ldr	r2, [pc, #176]	; (8002510 <HAL_RCC_OscConfig+0x354>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1a      	ldr	r2, [r3, #32]
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002468:	430a      	orrs	r2, r1
 800246a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	0a19      	lsrs	r1, r3, #8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	061a      	lsls	r2, r3, #24
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	0b5b      	lsrs	r3, r3, #13
 8002486:	3301      	adds	r3, #1
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	0212      	lsls	r2, r2, #8
 800248c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	210f      	movs	r1, #15
 8002496:	400b      	ands	r3, r1
 8002498:	491a      	ldr	r1, [pc, #104]	; (8002504 <HAL_RCC_OscConfig+0x348>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_RCC_OscConfig+0x34c>)
 80024a0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_OscConfig+0x350>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2513      	movs	r5, #19
 80024a8:	197c      	adds	r4, r7, r5
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7fe fbd2 	bl	8000c54 <HAL_InitTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80024b4:	197b      	adds	r3, r7, r5
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d060      	beq.n	800257e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80024bc:	197b      	adds	r3, r7, r5
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	e1f2      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d03f      	beq.n	800254a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_OscConfig+0x338>)
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0049      	lsls	r1, r1, #1
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fc02 	bl	8000ce0 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024e0:	e018      	b.n	8002514 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e2:	f7fe fbfd 	bl	8000ce0 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d911      	bls.n	8002514 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1d9      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
 80024f4:	40021000 	.word	0x40021000
 80024f8:	fffeffff 	.word	0xfffeffff
 80024fc:	fffbffff 	.word	0xfffbffff
 8002500:	ffffe0ff 	.word	0xffffe0ff
 8002504:	08003964 	.word	0x08003964
 8002508:	20000000 	.word	0x20000000
 800250c:	20000004 	.word	0x20000004
 8002510:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002514:	4bc9      	ldr	r3, [pc, #804]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d0e0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002520:	4bc6      	ldr	r3, [pc, #792]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4ac6      	ldr	r2, [pc, #792]	; (8002840 <HAL_RCC_OscConfig+0x684>)
 8002526:	4013      	ands	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1a      	ldr	r2, [r3, #32]
 800252e:	4bc3      	ldr	r3, [pc, #780]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002530:	430a      	orrs	r2, r1
 8002532:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002534:	4bc1      	ldr	r3, [pc, #772]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	0a19      	lsrs	r1, r3, #8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	061a      	lsls	r2, r3, #24
 8002542:	4bbe      	ldr	r3, [pc, #760]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002544:	430a      	orrs	r2, r1
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	e019      	b.n	800257e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800254a:	4bbc      	ldr	r3, [pc, #752]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4bbb      	ldr	r3, [pc, #748]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002550:	49bc      	ldr	r1, [pc, #752]	; (8002844 <HAL_RCC_OscConfig+0x688>)
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fbc3 	bl	8000ce0 <HAL_GetTick>
 800255a:	0003      	movs	r3, r0
 800255c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002560:	f7fe fbbe 	bl	8000ce0 <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e19a      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002572:	4bb2      	ldr	r3, [pc, #712]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4013      	ands	r3, r2
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2208      	movs	r2, #8
 8002584:	4013      	ands	r3, r2
 8002586:	d036      	beq.n	80025f6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d019      	beq.n	80025c4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002590:	4baa      	ldr	r3, [pc, #680]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002594:	4ba9      	ldr	r3, [pc, #676]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002596:	2101      	movs	r1, #1
 8002598:	430a      	orrs	r2, r1
 800259a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7fe fba0 	bl	8000ce0 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a6:	f7fe fb9b 	bl	8000ce0 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e177      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025b8:	4ba0      	ldr	r3, [pc, #640]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d0f1      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3ea>
 80025c2:	e018      	b.n	80025f6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c4:	4b9d      	ldr	r3, [pc, #628]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80025c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025c8:	4b9c      	ldr	r3, [pc, #624]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7fe fb86 	bl	8000ce0 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025da:	f7fe fb81 	bl	8000ce0 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e15d      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ec:	4b93      	ldr	r3, [pc, #588]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f1      	bne.n	80025da <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2204      	movs	r2, #4
 80025fc:	4013      	ands	r3, r2
 80025fe:	d100      	bne.n	8002602 <HAL_RCC_OscConfig+0x446>
 8002600:	e0ae      	b.n	8002760 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2023      	movs	r0, #35	; 0x23
 8002604:	183b      	adds	r3, r7, r0
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b8c      	ldr	r3, [pc, #560]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800260c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	055b      	lsls	r3, r3, #21
 8002612:	4013      	ands	r3, r2
 8002614:	d109      	bne.n	800262a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	4b89      	ldr	r3, [pc, #548]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261a:	4b88      	ldr	r3, [pc, #544]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0549      	lsls	r1, r1, #21
 8002620:	430a      	orrs	r2, r1
 8002622:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002624:	183b      	adds	r3, r7, r0
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b87      	ldr	r3, [pc, #540]	; (8002848 <HAL_RCC_OscConfig+0x68c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4013      	ands	r3, r2
 8002634:	d11a      	bne.n	800266c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b84      	ldr	r3, [pc, #528]	; (8002848 <HAL_RCC_OscConfig+0x68c>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b83      	ldr	r3, [pc, #524]	; (8002848 <HAL_RCC_OscConfig+0x68c>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0049      	lsls	r1, r1, #1
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002644:	f7fe fb4c 	bl	8000ce0 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7fe fb47 	bl	8000ce0 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e123      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	4b79      	ldr	r3, [pc, #484]	; (8002848 <HAL_RCC_OscConfig+0x68c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4013      	ands	r3, r2
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x4cc>
 8002678:	4b70      	ldr	r3, [pc, #448]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800267a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800267c:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0049      	lsls	r1, r1, #1
 8002682:	430a      	orrs	r2, r1
 8002684:	651a      	str	r2, [r3, #80]	; 0x50
 8002686:	e031      	b.n	80026ec <HAL_RCC_OscConfig+0x530>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x4ee>
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002694:	4b69      	ldr	r3, [pc, #420]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002696:	496b      	ldr	r1, [pc, #428]	; (8002844 <HAL_RCC_OscConfig+0x688>)
 8002698:	400a      	ands	r2, r1
 800269a:	651a      	str	r2, [r3, #80]	; 0x50
 800269c:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800269e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a0:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026a2:	496a      	ldr	r1, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x690>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	651a      	str	r2, [r3, #80]	; 0x50
 80026a8:	e020      	b.n	80026ec <HAL_RCC_OscConfig+0x530>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	23a0      	movs	r3, #160	; 0xa0
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d10e      	bne.n	80026d4 <HAL_RCC_OscConfig+0x518>
 80026b6:	4b61      	ldr	r3, [pc, #388]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ba:	4b60      	ldr	r3, [pc, #384]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	00c9      	lsls	r1, r1, #3
 80026c0:	430a      	orrs	r2, r1
 80026c2:	651a      	str	r2, [r3, #80]	; 0x50
 80026c4:	4b5d      	ldr	r3, [pc, #372]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026c8:	4b5c      	ldr	r3, [pc, #368]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	0049      	lsls	r1, r1, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	651a      	str	r2, [r3, #80]	; 0x50
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0x530>
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026d8:	4b58      	ldr	r3, [pc, #352]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026da:	495a      	ldr	r1, [pc, #360]	; (8002844 <HAL_RCC_OscConfig+0x688>)
 80026dc:	400a      	ands	r2, r1
 80026de:	651a      	str	r2, [r3, #80]	; 0x50
 80026e0:	4b56      	ldr	r3, [pc, #344]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026e4:	4b55      	ldr	r3, [pc, #340]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80026e6:	4959      	ldr	r1, [pc, #356]	; (800284c <HAL_RCC_OscConfig+0x690>)
 80026e8:	400a      	ands	r2, r1
 80026ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe faf4 	bl	8000ce0 <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026fc:	e009      	b.n	8002712 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe faef 	bl	8000ce0 <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	4a51      	ldr	r2, [pc, #324]	; (8002850 <HAL_RCC_OscConfig+0x694>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0ca      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002712:	4b4a      	ldr	r3, [pc, #296]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d0ef      	beq.n	80026fe <HAL_RCC_OscConfig+0x542>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fade 	bl	8000ce0 <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002728:	e009      	b.n	800273e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe fad9 	bl	8000ce0 <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	4a46      	ldr	r2, [pc, #280]	; (8002850 <HAL_RCC_OscConfig+0x694>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0b4      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800273e:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d1ef      	bne.n	800272a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800274a:	2323      	movs	r3, #35	; 0x23
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002754:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002758:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800275a:	493e      	ldr	r1, [pc, #248]	; (8002854 <HAL_RCC_OscConfig+0x698>)
 800275c:	400a      	ands	r2, r1
 800275e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d100      	bne.n	800276a <HAL_RCC_OscConfig+0x5ae>
 8002768:	e09d      	b.n	80028a6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b0c      	cmp	r3, #12
 800276e:	d100      	bne.n	8002772 <HAL_RCC_OscConfig+0x5b6>
 8002770:	e076      	b.n	8002860 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b02      	cmp	r3, #2
 8002778:	d145      	bne.n	8002806 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b2f      	ldr	r3, [pc, #188]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002780:	4935      	ldr	r1, [pc, #212]	; (8002858 <HAL_RCC_OscConfig+0x69c>)
 8002782:	400a      	ands	r2, r1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe faab 	bl	8000ce0 <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe faa6 	bl	8000ce0 <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e082      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	049b      	lsls	r3, r3, #18
 80027aa:	4013      	ands	r3, r2
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	4a2a      	ldr	r2, [pc, #168]	; (800285c <HAL_RCC_OscConfig+0x6a0>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	431a      	orrs	r2, r3
 80027c8:	4b1c      	ldr	r3, [pc, #112]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027ca:	430a      	orrs	r2, r1
 80027cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	0449      	lsls	r1, r1, #17
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe fa80 	bl	8000ce0 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fa7b 	bl	8000ce0 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e057      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCC_OscConfig+0x680>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	049b      	lsls	r3, r3, #18
 8002800:	4013      	ands	r3, r2
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x62a>
 8002804:	e04f      	b.n	80028a6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_RCC_OscConfig+0x680>)
 800280c:	4912      	ldr	r1, [pc, #72]	; (8002858 <HAL_RCC_OscConfig+0x69c>)
 800280e:	400a      	ands	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7fe fa65 	bl	8000ce0 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fa60 	bl	8000ce0 <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e03c      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800282e:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_OscConfig+0x680>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	049b      	lsls	r3, r3, #18
 8002836:	4013      	ands	r3, r2
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x660>
 800283a:	e034      	b.n	80028a6 <HAL_RCC_OscConfig+0x6ea>
 800283c:	40021000 	.word	0x40021000
 8002840:	ffff1fff 	.word	0xffff1fff
 8002844:	fffffeff 	.word	0xfffffeff
 8002848:	40007000 	.word	0x40007000
 800284c:	fffffbff 	.word	0xfffffbff
 8002850:	00001388 	.word	0x00001388
 8002854:	efffffff 	.word	0xefffffff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_RCC_OscConfig+0x6f4>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	025b      	lsls	r3, r3, #9
 8002878:	401a      	ands	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	429a      	cmp	r2, r3
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	23f0      	movs	r3, #240	; 0xf0
 8002886:	039b      	lsls	r3, r3, #14
 8002888:	401a      	ands	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	23c0      	movs	r3, #192	; 0xc0
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	401a      	ands	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b00a      	add	sp, #40	; 0x28
 80028ae:	bdb0      	pop	{r4, r5, r7, pc}
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b5b0      	push	{r4, r5, r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e128      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b96      	ldr	r3, [pc, #600]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	4013      	ands	r3, r2
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d91e      	bls.n	8002914 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b93      	ldr	r3, [pc, #588]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2201      	movs	r2, #1
 80028dc:	4393      	bics	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	4b90      	ldr	r3, [pc, #576]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028e8:	f7fe f9fa 	bl	8000ce0 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f0:	e009      	b.n	8002906 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f7fe f9f5 	bl	8000ce0 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	4a8a      	ldr	r2, [pc, #552]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e109      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b87      	ldr	r3, [pc, #540]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d1ee      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291e:	4b83      	ldr	r3, [pc, #524]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	22f0      	movs	r2, #240	; 0xf0
 8002924:	4393      	bics	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 800292e:	430a      	orrs	r2, r1
 8002930:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	4013      	ands	r3, r2
 800293a:	d100      	bne.n	800293e <HAL_RCC_ClockConfig+0x8a>
 800293c:	e089      	b.n	8002a52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002946:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	029b      	lsls	r3, r3, #10
 800294e:	4013      	ands	r3, r2
 8002950:	d120      	bne.n	8002994 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0e1      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800295e:	4b73      	ldr	r3, [pc, #460]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	049b      	lsls	r3, r3, #18
 8002966:	4013      	ands	r3, r2
 8002968:	d114      	bne.n	8002994 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0d5      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d106      	bne.n	8002984 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002976:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	d109      	bne.n	8002994 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0ca      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002984:	4b69      	ldr	r3, [pc, #420]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0c2      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002994:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2203      	movs	r2, #3
 800299a:	4393      	bics	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4b62      	ldr	r3, [pc, #392]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a8:	f7fe f99a 	bl	8000ce0 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d111      	bne.n	80029dc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b8:	e009      	b.n	80029ce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ba:	f7fe f991 	bl	8000ce0 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0a5      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ce:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	220c      	movs	r2, #12
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d1ef      	bne.n	80029ba <HAL_RCC_ClockConfig+0x106>
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d111      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e4:	e009      	b.n	80029fa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e6:	f7fe f97b 	bl	8000ce0 <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	4a4d      	ldr	r2, [pc, #308]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e08f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fa:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	220c      	movs	r2, #12
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d1ef      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x132>
 8002a06:	e024      	b.n	8002a52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d11b      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a10:	e009      	b.n	8002a26 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a12:	f7fe f965 	bl	8000ce0 <HAL_GetTick>
 8002a16:	0002      	movs	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	4a42      	ldr	r2, [pc, #264]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e079      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d1ef      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x15e>
 8002a32:	e00e      	b.n	8002a52 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7fe f954 	bl	8000ce0 <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e068      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a48:	4b38      	ldr	r3, [pc, #224]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	220c      	movs	r2, #12
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a52:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d21e      	bcs.n	8002a9e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2201      	movs	r2, #1
 8002a66:	4393      	bics	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a72:	f7fe f935 	bl	8000ce0 <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	e009      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe f930 	bl	8000ce0 <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <HAL_RCC_ClockConfig+0x274>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e044      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2201      	movs	r2, #1
 8002a96:	4013      	ands	r3, r2
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d1ee      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <HAL_RCC_ClockConfig+0x27c>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ac6:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <HAL_RCC_ClockConfig+0x280>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	00da      	lsls	r2, r3, #3
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002adc:	f000 f832 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002ae0:	0001      	movs	r1, r0
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_ClockConfig+0x278>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	220f      	movs	r2, #15
 8002aea:	4013      	ands	r3, r2
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <HAL_RCC_ClockConfig+0x284>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	000a      	movs	r2, r1
 8002af2:	40da      	lsrs	r2, r3
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_RCC_ClockConfig+0x288>)
 8002af6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_RCC_ClockConfig+0x28c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	250b      	movs	r5, #11
 8002afe:	197c      	adds	r4, r7, r5
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fe f8a7 	bl	8000c54 <HAL_InitTick>
 8002b06:	0003      	movs	r3, r0
 8002b08:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b0a:	197b      	adds	r3, r7, r5
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b12:	197b      	adds	r3, r7, r5
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bdb0      	pop	{r4, r5, r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40022000 	.word	0x40022000
 8002b28:	00001388 	.word	0x00001388
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	fffff8ff 	.word	0xfffff8ff
 8002b34:	ffffc7ff 	.word	0xffffc7ff
 8002b38:	08003964 	.word	0x08003964
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	20000004 	.word	0x20000004

08002b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b5b0      	push	{r4, r5, r7, lr}
 8002b46:	b08e      	sub	sp, #56	; 0x38
 8002b48:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b52:	230c      	movs	r3, #12
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d014      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x40>
 8002b5a:	d900      	bls.n	8002b5e <HAL_RCC_GetSysClockFreq+0x1a>
 8002b5c:	e07b      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x112>
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d002      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x24>
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b66:	e076      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b68:	4b44      	ldr	r3, [pc, #272]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d002      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b72:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b76:	e07c      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002b78:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b7c:	e079      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b7e:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x144>)
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b82:	e076      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	0c9a      	lsrs	r2, r3, #18
 8002b88:	230f      	movs	r3, #15
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x148>)
 8002b8e:	5c9b      	ldrb	r3, [r3, r2]
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	0d9a      	lsrs	r2, r3, #22
 8002b96:	2303      	movs	r3, #3
 8002b98:	4013      	ands	r3, r2
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9e:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	025b      	lsls	r3, r3, #9
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d01a      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	4a35      	ldr	r2, [pc, #212]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x144>)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	69b8      	ldr	r0, [r7, #24]
 8002bb8:	69f9      	ldr	r1, [r7, #28]
 8002bba:	f7fd fb51 	bl	8000260 <__aeabi_lmul>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	000b      	movs	r3, r1
 8002bc2:	0010      	movs	r0, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f7fd fb25 	bl	8000220 <__aeabi_uldivmod>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	000b      	movs	r3, r1
 8002bda:	0013      	movs	r3, r2
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bde:	e037      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2210      	movs	r2, #16
 8002be6:	4013      	ands	r3, r2
 8002be8:	d01a      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	68b8      	ldr	r0, [r7, #8]
 8002bf8:	68f9      	ldr	r1, [r7, #12]
 8002bfa:	f7fd fb31 	bl	8000260 <__aeabi_lmul>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	000b      	movs	r3, r1
 8002c02:	0010      	movs	r0, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f7fd fb05 	bl	8000220 <__aeabi_uldivmod>
 8002c16:	0002      	movs	r2, r0
 8002c18:	000b      	movs	r3, r1
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1e:	e017      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	0018      	movs	r0, r3
 8002c24:	2300      	movs	r3, #0
 8002c26:	0019      	movs	r1, r3
 8002c28:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f7fd fb18 	bl	8000260 <__aeabi_lmul>
 8002c30:	0002      	movs	r2, r0
 8002c32:	000b      	movs	r3, r1
 8002c34:	0010      	movs	r0, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	001c      	movs	r4, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	001d      	movs	r5, r3
 8002c40:	0022      	movs	r2, r4
 8002c42:	002b      	movs	r3, r5
 8002c44:	f7fd faec 	bl	8000220 <__aeabi_uldivmod>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	000b      	movs	r3, r1
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c54:	e00d      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	0b5b      	lsrs	r3, r3, #13
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	4013      	ands	r3, r2
 8002c60:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	3301      	adds	r3, #1
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	0212      	lsls	r2, r2, #8
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c70:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b00e      	add	sp, #56	; 0x38
 8002c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	003d0900 	.word	0x003d0900
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200
 8002c8c:	0800397c 	.word	0x0800397c

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b02      	ldr	r3, [pc, #8]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca8:	f7ff fff2 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cac:	0001      	movs	r1, r0
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	40d9      	lsrs	r1, r3
 8002cbe:	000b      	movs	r3, r1
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08003974 	.word	0x08003974

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cd4:	f7ff ffdc 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cd8:	0001      	movs	r1, r0
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	000b      	movs	r3, r1
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08003974 	.word	0x08003974

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d04:	2017      	movs	r0, #23
 8002d06:	183b      	adds	r3, r7, r0
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2220      	movs	r2, #32
 8002d12:	4013      	ands	r3, r2
 8002d14:	d100      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002d16:	e0c7      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d18:	4b84      	ldr	r3, [pc, #528]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	055b      	lsls	r3, r3, #21
 8002d20:	4013      	ands	r3, r2
 8002d22:	d109      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b81      	ldr	r3, [pc, #516]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d28:	4b80      	ldr	r3, [pc, #512]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	0549      	lsls	r1, r1, #21
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b7d      	ldr	r3, [pc, #500]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4013      	ands	r3, r2
 8002d42:	d11a      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d44:	4b7a      	ldr	r3, [pc, #488]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b79      	ldr	r3, [pc, #484]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	0049      	lsls	r1, r1, #1
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d52:	f7fd ffc5 	bl	8000ce0 <HAL_GetTick>
 8002d56:	0003      	movs	r3, r0
 8002d58:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	e008      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5c:	f7fd ffc0 	bl	8000ce0 <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e0d9      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	23c0      	movs	r3, #192	; 0xc0
 8002d80:	039b      	lsls	r3, r3, #14
 8002d82:	4013      	ands	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	23c0      	movs	r3, #192	; 0xc0
 8002d8c:	039b      	lsls	r3, r3, #14
 8002d8e:	4013      	ands	r3, r2
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d013      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	23c0      	movs	r3, #192	; 0xc0
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	401a      	ands	r2, r3
 8002da0:	23c0      	movs	r3, #192	; 0xc0
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10a      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002da8:	4b60      	ldr	r3, [pc, #384]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	029b      	lsls	r3, r3, #10
 8002db0:	401a      	ands	r2, r3
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	029b      	lsls	r3, r3, #10
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d101      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0b1      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc2:	23c0      	movs	r3, #192	; 0xc0
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d03b      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	23c0      	movs	r3, #192	; 0xc0
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	4013      	ands	r3, r2
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d033      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2220      	movs	r2, #32
 8002de6:	4013      	ands	r3, r2
 8002de8:	d02e      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002dea:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	4a51      	ldr	r2, [pc, #324]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002df6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002df8:	4b4c      	ldr	r3, [pc, #304]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	0309      	lsls	r1, r1, #12
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e06:	4b49      	ldr	r3, [pc, #292]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e08:	494b      	ldr	r1, [pc, #300]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d014      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fd ff5f 	bl	8000ce0 <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e26:	e009      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fd ff5a 	bl	8000ce0 <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	4a42      	ldr	r2, [pc, #264]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e072      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e3c:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	d0ef      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d01f      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	23c0      	movs	r3, #192	; 0xc0
 8002e58:	029b      	lsls	r3, r3, #10
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	23c0      	movs	r3, #192	; 0xc0
 8002e5e:	029b      	lsls	r3, r3, #10
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d10c      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	23c0      	movs	r3, #192	; 0xc0
 8002e74:	039b      	lsls	r3, r3, #14
 8002e76:	401a      	ands	r2, r3
 8002e78:	4b2c      	ldr	r3, [pc, #176]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	23c0      	movs	r3, #192	; 0xc0
 8002e88:	029b      	lsls	r3, r3, #10
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e92:	2317      	movs	r3, #23
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9c:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ea2:	4928      	ldr	r1, [pc, #160]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2202      	movs	r2, #2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	4393      	bics	r3, r2
 8002eba:	0019      	movs	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2208      	movs	r2, #8
 8002eea:	4013      	ands	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eee:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002efe:	430a      	orrs	r2, r1
 8002f00:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	0018      	movs	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b006      	add	sp, #24
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
 8002f34:	fffcffff 	.word	0xfffcffff
 8002f38:	fff7ffff 	.word	0xfff7ffff
 8002f3c:	00001388 	.word	0x00001388
 8002f40:	ffcfffff 	.word	0xffcfffff
 8002f44:	efffffff 	.word	0xefffffff
 8002f48:	fffff3ff 	.word	0xfffff3ff
 8002f4c:	ffffcfff 	.word	0xffffcfff
 8002f50:	fff3ffff 	.word	0xfff3ffff

08002f54 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e04c      	b.n	8003000 <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2278      	movs	r2, #120	; 0x78
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7fd fdc5 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2224      	movs	r2, #36	; 0x24
 8002f82:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2101      	movs	r1, #1
 8002f90:	438a      	bics	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 f838 	bl	800300c <UART_SetConfig>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e02c      	b.n	8003000 <HAL_HalfDuplex_Init+0xac>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 fa75 	bl	80034a0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4911      	ldr	r1, [pc, #68]	; (8003008 <HAL_HalfDuplex_Init+0xb4>)
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2122      	movs	r1, #34	; 0x22
 8002fd2:	438a      	bics	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2108      	movs	r1, #8
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 fb05 	bl	8003608 <UART_CheckIdleState>
 8002ffe:	0003      	movs	r3, r0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}
 8003008:	ffffb7ff 	.word	0xffffb7ff

0800300c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b08e      	sub	sp, #56	; 0x38
 8003010:	af00      	add	r7, sp, #0
 8003012:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003014:	231a      	movs	r3, #26
 8003016:	2218      	movs	r2, #24
 8003018:	189b      	adds	r3, r3, r2
 800301a:	19db      	adds	r3, r3, r7
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	431a      	orrs	r2, r3
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	431a      	orrs	r2, r3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4313      	orrs	r3, r2
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4ab4      	ldr	r2, [pc, #720]	; (8003310 <UART_SetConfig+0x304>)
 8003040:	4013      	ands	r3, r2
 8003042:	0019      	movs	r1, r3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4aaf      	ldr	r2, [pc, #700]	; (8003314 <UART_SetConfig+0x308>)
 8003056:	4013      	ands	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4aa9      	ldr	r2, [pc, #676]	; (8003318 <UART_SetConfig+0x30c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307c:	4313      	orrs	r3, r2
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4aa5      	ldr	r2, [pc, #660]	; (800331c <UART_SetConfig+0x310>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4aa1      	ldr	r2, [pc, #644]	; (8003320 <UART_SetConfig+0x314>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d131      	bne.n	8003104 <UART_SetConfig+0xf8>
 80030a0:	4ba0      	ldr	r3, [pc, #640]	; (8003324 <UART_SetConfig+0x318>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	220c      	movs	r2, #12
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d01d      	beq.n	80030e8 <UART_SetConfig+0xdc>
 80030ac:	d823      	bhi.n	80030f6 <UART_SetConfig+0xea>
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d00c      	beq.n	80030cc <UART_SetConfig+0xc0>
 80030b2:	d820      	bhi.n	80030f6 <UART_SetConfig+0xea>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <UART_SetConfig+0xb2>
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d00e      	beq.n	80030da <UART_SetConfig+0xce>
 80030bc:	e01b      	b.n	80030f6 <UART_SetConfig+0xea>
 80030be:	231b      	movs	r3, #27
 80030c0:	2218      	movs	r2, #24
 80030c2:	189b      	adds	r3, r3, r2
 80030c4:	19db      	adds	r3, r3, r7
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e065      	b.n	8003198 <UART_SetConfig+0x18c>
 80030cc:	231b      	movs	r3, #27
 80030ce:	2218      	movs	r2, #24
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	19db      	adds	r3, r3, r7
 80030d4:	2202      	movs	r2, #2
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e05e      	b.n	8003198 <UART_SetConfig+0x18c>
 80030da:	231b      	movs	r3, #27
 80030dc:	2218      	movs	r2, #24
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	19db      	adds	r3, r3, r7
 80030e2:	2204      	movs	r2, #4
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e057      	b.n	8003198 <UART_SetConfig+0x18c>
 80030e8:	231b      	movs	r3, #27
 80030ea:	2218      	movs	r2, #24
 80030ec:	189b      	adds	r3, r3, r2
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	2208      	movs	r2, #8
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e050      	b.n	8003198 <UART_SetConfig+0x18c>
 80030f6:	231b      	movs	r3, #27
 80030f8:	2218      	movs	r2, #24
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	19db      	adds	r3, r3, r7
 80030fe:	2210      	movs	r2, #16
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e049      	b.n	8003198 <UART_SetConfig+0x18c>
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a83      	ldr	r2, [pc, #524]	; (8003318 <UART_SetConfig+0x30c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d13e      	bne.n	800318c <UART_SetConfig+0x180>
 800310e:	4b85      	ldr	r3, [pc, #532]	; (8003324 <UART_SetConfig+0x318>)
 8003110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003112:	23c0      	movs	r3, #192	; 0xc0
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	4013      	ands	r3, r2
 8003118:	22c0      	movs	r2, #192	; 0xc0
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	4293      	cmp	r3, r2
 800311e:	d027      	beq.n	8003170 <UART_SetConfig+0x164>
 8003120:	22c0      	movs	r2, #192	; 0xc0
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	4293      	cmp	r3, r2
 8003126:	d82a      	bhi.n	800317e <UART_SetConfig+0x172>
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	0112      	lsls	r2, r2, #4
 800312c:	4293      	cmp	r3, r2
 800312e:	d011      	beq.n	8003154 <UART_SetConfig+0x148>
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	4293      	cmp	r3, r2
 8003136:	d822      	bhi.n	800317e <UART_SetConfig+0x172>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <UART_SetConfig+0x13a>
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	00d2      	lsls	r2, r2, #3
 8003140:	4293      	cmp	r3, r2
 8003142:	d00e      	beq.n	8003162 <UART_SetConfig+0x156>
 8003144:	e01b      	b.n	800317e <UART_SetConfig+0x172>
 8003146:	231b      	movs	r3, #27
 8003148:	2218      	movs	r2, #24
 800314a:	189b      	adds	r3, r3, r2
 800314c:	19db      	adds	r3, r3, r7
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e021      	b.n	8003198 <UART_SetConfig+0x18c>
 8003154:	231b      	movs	r3, #27
 8003156:	2218      	movs	r2, #24
 8003158:	189b      	adds	r3, r3, r2
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e01a      	b.n	8003198 <UART_SetConfig+0x18c>
 8003162:	231b      	movs	r3, #27
 8003164:	2218      	movs	r2, #24
 8003166:	189b      	adds	r3, r3, r2
 8003168:	19db      	adds	r3, r3, r7
 800316a:	2204      	movs	r2, #4
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e013      	b.n	8003198 <UART_SetConfig+0x18c>
 8003170:	231b      	movs	r3, #27
 8003172:	2218      	movs	r2, #24
 8003174:	189b      	adds	r3, r3, r2
 8003176:	19db      	adds	r3, r3, r7
 8003178:	2208      	movs	r2, #8
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e00c      	b.n	8003198 <UART_SetConfig+0x18c>
 800317e:	231b      	movs	r3, #27
 8003180:	2218      	movs	r2, #24
 8003182:	189b      	adds	r3, r3, r2
 8003184:	19db      	adds	r3, r3, r7
 8003186:	2210      	movs	r2, #16
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e005      	b.n	8003198 <UART_SetConfig+0x18c>
 800318c:	231b      	movs	r3, #27
 800318e:	2218      	movs	r2, #24
 8003190:	189b      	adds	r3, r3, r2
 8003192:	19db      	adds	r3, r3, r7
 8003194:	2210      	movs	r2, #16
 8003196:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5e      	ldr	r2, [pc, #376]	; (8003318 <UART_SetConfig+0x30c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d000      	beq.n	80031a4 <UART_SetConfig+0x198>
 80031a2:	e084      	b.n	80032ae <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031a4:	231b      	movs	r3, #27
 80031a6:	2218      	movs	r2, #24
 80031a8:	189b      	adds	r3, r3, r2
 80031aa:	19db      	adds	r3, r3, r7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d01d      	beq.n	80031ee <UART_SetConfig+0x1e2>
 80031b2:	dc20      	bgt.n	80031f6 <UART_SetConfig+0x1ea>
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d015      	beq.n	80031e4 <UART_SetConfig+0x1d8>
 80031b8:	dc1d      	bgt.n	80031f6 <UART_SetConfig+0x1ea>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <UART_SetConfig+0x1b8>
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d005      	beq.n	80031ce <UART_SetConfig+0x1c2>
 80031c2:	e018      	b.n	80031f6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c4:	f7ff fd6e 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80031c8:	0003      	movs	r3, r0
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031cc:	e01c      	b.n	8003208 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031ce:	4b55      	ldr	r3, [pc, #340]	; (8003324 <UART_SetConfig+0x318>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2210      	movs	r2, #16
 80031d4:	4013      	ands	r3, r2
 80031d6:	d002      	beq.n	80031de <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80031d8:	4b53      	ldr	r3, [pc, #332]	; (8003328 <UART_SetConfig+0x31c>)
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80031dc:	e014      	b.n	8003208 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80031de:	4b53      	ldr	r3, [pc, #332]	; (800332c <UART_SetConfig+0x320>)
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031e2:	e011      	b.n	8003208 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e4:	f7ff fcae 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80031e8:	0003      	movs	r3, r0
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031ec:	e00c      	b.n	8003208 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031f4:	e008      	b.n	8003208 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80031fa:	231a      	movs	r3, #26
 80031fc:	2218      	movs	r2, #24
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	19db      	adds	r3, r3, r7
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
        break;
 8003206:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d100      	bne.n	8003210 <UART_SetConfig+0x204>
 800320e:	e12f      	b.n	8003470 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	0013      	movs	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	189b      	adds	r3, r3, r2
 800321a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321c:	429a      	cmp	r2, r3
 800321e:	d305      	bcc.n	800322c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003228:	429a      	cmp	r2, r3
 800322a:	d906      	bls.n	800323a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800322c:	231a      	movs	r3, #26
 800322e:	2218      	movs	r2, #24
 8003230:	189b      	adds	r3, r3, r2
 8003232:	19db      	adds	r3, r3, r7
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e11a      	b.n	8003470 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	6939      	ldr	r1, [r7, #16]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	000b      	movs	r3, r1
 8003248:	0e1b      	lsrs	r3, r3, #24
 800324a:	0010      	movs	r0, r2
 800324c:	0205      	lsls	r5, r0, #8
 800324e:	431d      	orrs	r5, r3
 8003250:	000b      	movs	r3, r1
 8003252:	021c      	lsls	r4, r3, #8
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	085b      	lsrs	r3, r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	1900      	adds	r0, r0, r4
 8003266:	4169      	adcs	r1, r5
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f7fc ffd3 	bl	8000220 <__aeabi_uldivmod>
 800327a:	0002      	movs	r2, r0
 800327c:	000b      	movs	r3, r1
 800327e:	0013      	movs	r3, r2
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003284:	23c0      	movs	r3, #192	; 0xc0
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	429a      	cmp	r2, r3
 800328a:	d309      	bcc.n	80032a0 <UART_SetConfig+0x294>
 800328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	035b      	lsls	r3, r3, #13
 8003292:	429a      	cmp	r2, r3
 8003294:	d204      	bcs.n	80032a0 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	e0e7      	b.n	8003470 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80032a0:	231a      	movs	r3, #26
 80032a2:	2218      	movs	r2, #24
 80032a4:	189b      	adds	r3, r3, r2
 80032a6:	19db      	adds	r3, r3, r7
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e0e0      	b.n	8003470 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d000      	beq.n	80032bc <UART_SetConfig+0x2b0>
 80032ba:	e082      	b.n	80033c2 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80032bc:	231b      	movs	r3, #27
 80032be:	2218      	movs	r2, #24
 80032c0:	189b      	adds	r3, r3, r2
 80032c2:	19db      	adds	r3, r3, r7
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d834      	bhi.n	8003334 <UART_SetConfig+0x328>
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <UART_SetConfig+0x324>)
 80032ce:	18d3      	adds	r3, r2, r3
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d4:	f7ff fce6 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80032d8:	0003      	movs	r3, r0
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032dc:	e033      	b.n	8003346 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032de:	f7ff fcf7 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 80032e2:	0003      	movs	r3, r0
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032e6:	e02e      	b.n	8003346 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <UART_SetConfig+0x318>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2210      	movs	r2, #16
 80032ee:	4013      	ands	r3, r2
 80032f0:	d002      	beq.n	80032f8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <UART_SetConfig+0x31c>)
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032f6:	e026      	b.n	8003346 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <UART_SetConfig+0x320>)
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032fc:	e023      	b.n	8003346 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7ff fc21 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8003302:	0003      	movs	r3, r0
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003306:	e01e      	b.n	8003346 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800330e:	e01a      	b.n	8003346 <UART_SetConfig+0x33a>
 8003310:	efff69f3 	.word	0xefff69f3
 8003314:	ffffcfff 	.word	0xffffcfff
 8003318:	40004800 	.word	0x40004800
 800331c:	fffff4ff 	.word	0xfffff4ff
 8003320:	40004400 	.word	0x40004400
 8003324:	40021000 	.word	0x40021000
 8003328:	003d0900 	.word	0x003d0900
 800332c:	00f42400 	.word	0x00f42400
 8003330:	08003988 	.word	0x08003988
      default:
        pclk = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003338:	231a      	movs	r3, #26
 800333a:	2218      	movs	r2, #24
 800333c:	189b      	adds	r3, r3, r2
 800333e:	19db      	adds	r3, r3, r7
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
        break;
 8003344:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d100      	bne.n	800334e <UART_SetConfig+0x342>
 800334c:	e090      	b.n	8003470 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	005a      	lsls	r2, r3, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	18d2      	adds	r2, r2, r3
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f7fc fed1 	bl	8000108 <__udivsi3>
 8003366:	0003      	movs	r3, r0
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	2b0f      	cmp	r3, #15
 800336e:	d921      	bls.n	80033b4 <UART_SetConfig+0x3a8>
 8003370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	025b      	lsls	r3, r3, #9
 8003376:	429a      	cmp	r2, r3
 8003378:	d21c      	bcs.n	80033b4 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	b29a      	uxth	r2, r3
 800337e:	200e      	movs	r0, #14
 8003380:	2418      	movs	r4, #24
 8003382:	1903      	adds	r3, r0, r4
 8003384:	19db      	adds	r3, r3, r7
 8003386:	210f      	movs	r1, #15
 8003388:	438a      	bics	r2, r1
 800338a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	b29b      	uxth	r3, r3
 8003392:	2207      	movs	r2, #7
 8003394:	4013      	ands	r3, r2
 8003396:	b299      	uxth	r1, r3
 8003398:	1903      	adds	r3, r0, r4
 800339a:	19db      	adds	r3, r3, r7
 800339c:	1902      	adds	r2, r0, r4
 800339e:	19d2      	adds	r2, r2, r7
 80033a0:	8812      	ldrh	r2, [r2, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1902      	adds	r2, r0, r4
 80033ac:	19d2      	adds	r2, r2, r7
 80033ae:	8812      	ldrh	r2, [r2, #0]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	e05d      	b.n	8003470 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80033b4:	231a      	movs	r3, #26
 80033b6:	2218      	movs	r2, #24
 80033b8:	189b      	adds	r3, r3, r2
 80033ba:	19db      	adds	r3, r3, r7
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e056      	b.n	8003470 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033c2:	231b      	movs	r3, #27
 80033c4:	2218      	movs	r2, #24
 80033c6:	189b      	adds	r3, r3, r2
 80033c8:	19db      	adds	r3, r3, r7
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d822      	bhi.n	8003416 <UART_SetConfig+0x40a>
 80033d0:	009a      	lsls	r2, r3, #2
 80033d2:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <UART_SetConfig+0x484>)
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033da:	f7ff fc63 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80033de:	0003      	movs	r3, r0
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033e2:	e021      	b.n	8003428 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7ff fc74 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 80033e8:	0003      	movs	r3, r0
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033ec:	e01c      	b.n	8003428 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <UART_SetConfig+0x488>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2210      	movs	r2, #16
 80033f4:	4013      	ands	r3, r2
 80033f6:	d002      	beq.n	80033fe <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <UART_SetConfig+0x48c>)
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80033fc:	e014      	b.n	8003428 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <UART_SetConfig+0x490>)
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003402:	e011      	b.n	8003428 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003404:	f7ff fb9e 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8003408:	0003      	movs	r3, r0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800340c:	e00c      	b.n	8003428 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003414:	e008      	b.n	8003428 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800341a:	231a      	movs	r3, #26
 800341c:	2218      	movs	r2, #24
 800341e:	189b      	adds	r3, r3, r2
 8003420:	19db      	adds	r3, r3, r7
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
        break;
 8003426:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d020      	beq.n	8003470 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	085a      	lsrs	r2, r3, #1
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	18d2      	adds	r2, r2, r3
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	0019      	movs	r1, r3
 800343e:	0010      	movs	r0, r2
 8003440:	f7fc fe62 	bl	8000108 <__udivsi3>
 8003444:	0003      	movs	r3, r0
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	2b0f      	cmp	r3, #15
 800344c:	d90a      	bls.n	8003464 <UART_SetConfig+0x458>
 800344e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	025b      	lsls	r3, r3, #9
 8003454:	429a      	cmp	r2, r3
 8003456:	d205      	bcs.n	8003464 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	b29a      	uxth	r2, r3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	e005      	b.n	8003470 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003464:	231a      	movs	r3, #26
 8003466:	2218      	movs	r2, #24
 8003468:	189b      	adds	r3, r3, r2
 800346a:	19db      	adds	r3, r3, r7
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2200      	movs	r2, #0
 8003474:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2200      	movs	r2, #0
 800347a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800347c:	231a      	movs	r3, #26
 800347e:	2218      	movs	r2, #24
 8003480:	189b      	adds	r3, r3, r2
 8003482:	19db      	adds	r3, r3, r7
 8003484:	781b      	ldrb	r3, [r3, #0]
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b00e      	add	sp, #56	; 0x38
 800348c:	bdb0      	pop	{r4, r5, r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	080039ac 	.word	0x080039ac
 8003494:	40021000 	.word	0x40021000
 8003498:	003d0900 	.word	0x003d0900
 800349c:	00f42400 	.word	0x00f42400

080034a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2201      	movs	r2, #1
 80034ae:	4013      	ands	r3, r2
 80034b0:	d00b      	beq.n	80034ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a4a      	ldr	r2, [pc, #296]	; (80035e4 <UART_AdvFeatureConfig+0x144>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	0019      	movs	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2202      	movs	r2, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	d00b      	beq.n	80034ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a43      	ldr	r2, [pc, #268]	; (80035e8 <UART_AdvFeatureConfig+0x148>)
 80034dc:	4013      	ands	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2204      	movs	r2, #4
 80034f2:	4013      	ands	r3, r2
 80034f4:	d00b      	beq.n	800350e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <UART_AdvFeatureConfig+0x14c>)
 80034fe:	4013      	ands	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2208      	movs	r2, #8
 8003514:	4013      	ands	r3, r2
 8003516:	d00b      	beq.n	8003530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4a34      	ldr	r2, [pc, #208]	; (80035f0 <UART_AdvFeatureConfig+0x150>)
 8003520:	4013      	ands	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2210      	movs	r2, #16
 8003536:	4013      	ands	r3, r2
 8003538:	d00b      	beq.n	8003552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <UART_AdvFeatureConfig+0x154>)
 8003542:	4013      	ands	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2220      	movs	r2, #32
 8003558:	4013      	ands	r3, r2
 800355a:	d00b      	beq.n	8003574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <UART_AdvFeatureConfig+0x158>)
 8003564:	4013      	ands	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	4013      	ands	r3, r2
 800357c:	d01d      	beq.n	80035ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <UART_AdvFeatureConfig+0x15c>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	035b      	lsls	r3, r3, #13
 800359e:	429a      	cmp	r2, r3
 80035a0:	d10b      	bne.n	80035ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a15      	ldr	r2, [pc, #84]	; (8003600 <UART_AdvFeatureConfig+0x160>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	4013      	ands	r3, r2
 80035c2:	d00b      	beq.n	80035dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <UART_AdvFeatureConfig+0x164>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
  }
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	fffdffff 	.word	0xfffdffff
 80035e8:	fffeffff 	.word	0xfffeffff
 80035ec:	fffbffff 	.word	0xfffbffff
 80035f0:	ffff7fff 	.word	0xffff7fff
 80035f4:	ffffefff 	.word	0xffffefff
 80035f8:	ffffdfff 	.word	0xffffdfff
 80035fc:	ffefffff 	.word	0xffefffff
 8003600:	ff9fffff 	.word	0xff9fffff
 8003604:	fff7ffff 	.word	0xfff7ffff

08003608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b092      	sub	sp, #72	; 0x48
 800360c:	af02      	add	r7, sp, #8
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2284      	movs	r2, #132	; 0x84
 8003614:	2100      	movs	r1, #0
 8003616:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003618:	f7fd fb62 	bl	8000ce0 <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2208      	movs	r2, #8
 8003628:	4013      	ands	r3, r2
 800362a:	2b08      	cmp	r3, #8
 800362c:	d12c      	bne.n	8003688 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003630:	2280      	movs	r2, #128	; 0x80
 8003632:	0391      	lsls	r1, r2, #14
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4a46      	ldr	r2, [pc, #280]	; (8003750 <UART_CheckIdleState+0x148>)
 8003638:	9200      	str	r2, [sp, #0]
 800363a:	2200      	movs	r2, #0
 800363c:	f000 f88c 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d021      	beq.n	8003688 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003644:	f3ef 8310 	mrs	r3, PRIMASK
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
 800364e:	2301      	movs	r3, #1
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	438a      	bics	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2278      	movs	r2, #120	; 0x78
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e05f      	b.n	8003748 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2204      	movs	r2, #4
 8003690:	4013      	ands	r3, r2
 8003692:	2b04      	cmp	r3, #4
 8003694:	d146      	bne.n	8003724 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	03d1      	lsls	r1, r2, #15
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <UART_CheckIdleState+0x148>)
 80036a0:	9200      	str	r2, [sp, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f000 f858 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 80036a8:	1e03      	subs	r3, r0, #0
 80036aa:	d03b      	beq.n	8003724 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ac:	f3ef 8310 	mrs	r3, PRIMASK
 80036b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80036b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
 80036b6:	2301      	movs	r3, #1
 80036b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4921      	ldr	r1, [pc, #132]	; (8003754 <UART_CheckIdleState+0x14c>)
 80036ce:	400a      	ands	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f383 8810 	msr	PRIMASK, r3
}
 80036dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036de:	f3ef 8310 	mrs	r3, PRIMASK
 80036e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80036e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
 80036e8:	2301      	movs	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	438a      	bics	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f383 8810 	msr	PRIMASK, r3
}
 800370e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	2120      	movs	r1, #32
 8003716:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2278      	movs	r2, #120	; 0x78
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e011      	b.n	8003748 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	2120      	movs	r1, #32
 8003730:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2278      	movs	r2, #120	; 0x78
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b010      	add	sp, #64	; 0x40
 800374e:	bd80      	pop	{r7, pc}
 8003750:	01ffffff 	.word	0x01ffffff
 8003754:	fffffedf 	.word	0xfffffedf

08003758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003768:	e04b      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	3301      	adds	r3, #1
 800376e:	d048      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003770:	f7fd fab6 	bl	8000ce0 <HAL_GetTick>
 8003774:	0002      	movs	r2, r0
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e04b      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2204      	movs	r2, #4
 8003792:	4013      	ands	r3, r2
 8003794:	d035      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2208      	movs	r2, #8
 800379e:	4013      	ands	r3, r2
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d111      	bne.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2208      	movs	r2, #8
 80037aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f83c 	bl	800382c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2284      	movs	r2, #132	; 0x84
 80037b8:	2108      	movs	r1, #8
 80037ba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2278      	movs	r2, #120	; 0x78
 80037c0:	2100      	movs	r1, #0
 80037c2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e02c      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	401a      	ands	r2, r3
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	429a      	cmp	r2, r3
 80037da:	d112      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f81f 	bl	800382c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2284      	movs	r2, #132	; 0x84
 80037f2:	2120      	movs	r1, #32
 80037f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2278      	movs	r2, #120	; 0x78
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	425a      	negs	r2, r3
 8003812:	4153      	adcs	r3, r2
 8003814:	b2db      	uxtb	r3, r3
 8003816:	001a      	movs	r2, r3
 8003818:	1dfb      	adds	r3, r7, #7
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d0a4      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	0018      	movs	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	b004      	add	sp, #16
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08e      	sub	sp, #56	; 0x38
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003834:	f3ef 8310 	mrs	r3, PRIMASK
 8003838:	617b      	str	r3, [r7, #20]
  return(result);
 800383a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
 800383e:	2301      	movs	r3, #1
 8003840:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4926      	ldr	r1, [pc, #152]	; (80038f0 <UART_EndRxTransfer+0xc4>)
 8003856:	400a      	ands	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f383 8810 	msr	PRIMASK, r3
}
 8003864:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003866:	f3ef 8310 	mrs	r3, PRIMASK
 800386a:	623b      	str	r3, [r7, #32]
  return(result);
 800386c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	633b      	str	r3, [r7, #48]	; 0x30
 8003870:	2301      	movs	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	f383 8810 	msr	PRIMASK, r3
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	438a      	bics	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	f383 8810 	msr	PRIMASK, r3
}
 8003896:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	2b01      	cmp	r3, #1
 800389e:	d118      	bne.n	80038d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a0:	f3ef 8310 	mrs	r3, PRIMASK
 80038a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038aa:	2301      	movs	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2110      	movs	r1, #16
 80038c2:	438a      	bics	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	2120      	movs	r1, #32
 80038d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b00e      	add	sp, #56	; 0x38
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	fffffedf 	.word	0xfffffedf

080038f4 <memset>:
 80038f4:	0003      	movs	r3, r0
 80038f6:	1882      	adds	r2, r0, r2
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d100      	bne.n	80038fe <memset+0xa>
 80038fc:	4770      	bx	lr
 80038fe:	7019      	strb	r1, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	e7f9      	b.n	80038f8 <memset+0x4>

08003904 <__libc_init_array>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	2600      	movs	r6, #0
 8003908:	4c0c      	ldr	r4, [pc, #48]	; (800393c <__libc_init_array+0x38>)
 800390a:	4d0d      	ldr	r5, [pc, #52]	; (8003940 <__libc_init_array+0x3c>)
 800390c:	1b64      	subs	r4, r4, r5
 800390e:	10a4      	asrs	r4, r4, #2
 8003910:	42a6      	cmp	r6, r4
 8003912:	d109      	bne.n	8003928 <__libc_init_array+0x24>
 8003914:	2600      	movs	r6, #0
 8003916:	f000 f819 	bl	800394c <_init>
 800391a:	4c0a      	ldr	r4, [pc, #40]	; (8003944 <__libc_init_array+0x40>)
 800391c:	4d0a      	ldr	r5, [pc, #40]	; (8003948 <__libc_init_array+0x44>)
 800391e:	1b64      	subs	r4, r4, r5
 8003920:	10a4      	asrs	r4, r4, #2
 8003922:	42a6      	cmp	r6, r4
 8003924:	d105      	bne.n	8003932 <__libc_init_array+0x2e>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	00b3      	lsls	r3, r6, #2
 800392a:	58eb      	ldr	r3, [r5, r3]
 800392c:	4798      	blx	r3
 800392e:	3601      	adds	r6, #1
 8003930:	e7ee      	b.n	8003910 <__libc_init_array+0xc>
 8003932:	00b3      	lsls	r3, r6, #2
 8003934:	58eb      	ldr	r3, [r5, r3]
 8003936:	4798      	blx	r3
 8003938:	3601      	adds	r6, #1
 800393a:	e7f2      	b.n	8003922 <__libc_init_array+0x1e>
 800393c:	080039d8 	.word	0x080039d8
 8003940:	080039d8 	.word	0x080039d8
 8003944:	080039dc 	.word	0x080039dc
 8003948:	080039d8 	.word	0x080039d8

0800394c <_init>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003952:	bc08      	pop	{r3}
 8003954:	469e      	mov	lr, r3
 8003956:	4770      	bx	lr

08003958 <_fini>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr
